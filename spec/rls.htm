<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
	<TITLE>RLS specification</TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.2 (Linux)">
	<META NAME="CREATED" CONTENT="20010724;13013600">
	<META NAME="CHANGEDBY" CONTENT=" ">
	<META NAME="CHANGED" CONTENT="20010724;16153100">
</HEAD>
<BODY BGCOLOR="#ffffff">
<P ALIGN=CENTER STYLE="margin-bottom: 0in">DotGNU<BR>Resource Locator
String specification<BR><BR>By:<BR><BR>Enzo-Adrian Reyes
(myrddian@bigpond.net.au)<BR>Barry
Fitzgerald(fitzix@sdf.lonestar.org)</P>
<P ALIGN=CENTER STYLE="margin-bottom: 0in">Version 0.7</P>
<P><BR><BR><BR><BR>
</P>
<H1><U>Introduction:</U></H1>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The idea behind a
RLS (Resource Locator String) is the easy identification, and passing
of information from peer to peer. It can also be used by end users to
locate remote services provided by DotGNU. A RLS can be used to point
to any DotGNU, this forces the RLS to be generic in format and also
extendable for the individual service. Hence each service may expect
a different RLS input, it is up to the individual service to
interpret it's RLS tokens and data.</P>
<P><BR><BR><BR>
</P>
<H1><U>Format:</U></H1>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The format of an
RLS contains two non-optional fields, these fields are separated
using the '/' character. As an extension to these non-optional
fields, RLS's have two extra fields which are optional. The format of
an RLS is as follows:</P>
<BLOCKQUOTE><CODE>rls://[User name@]&lt;DotGNU Server&gt;/&lt;DotGNU
Service&gt;:[Tokens]</CODE></BLOCKQUOTE>
<P>The optional fields are in square brackets, while the non-optional
fields are in nested in <CODE>&quot;&lt;&gt;&quot; </CODE>brackets.</P>
<P>Note: Please do note that the RLS specification is trying to
conform to the W3 RFC-2386 regarding Universal Resource Indentifiers.
If you find conflicts against the RFC please inform one of the
Authors, of the breach. 
</P>
<P><STRONG>Non-optional Fields:</STRONG></P>
<P><BR><BR>
</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The first
non-optional field is the <CODE>&quot;&lt;DotGNU server&gt;&quot;</CODE>
field. This field tells a machine the IP/DNS of the server to locate
the service. The second field is the <CODE>&quot;&lt;DotGNU Service&gt;&quot;</CODE>
field and contains a string which is passed to the server, contained
in the server field, to open the named service. Some examples: 
</P>
<BLOCKQUOTE>(1) rls://dotgnu.org/cvs<BR>(2)
rls://dotgnu.org/maillists<BR>(3) rls://gnu.org/tbbs 
</BLOCKQUOTE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The first example
opens the dotgnu.org server and asks for it's cvs service. The second
example also opens the same server and ask's to use the mail-list
service. The third opens gnu.org and asks for the tbbs service. 
</P>
<P><BR><BR>
</P>
<P><STRONG>Optional fields:</STRONG></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The optional
fields contain information which is of no use to the DotGNU server,
but rather to the service it provides.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The first optional
field is the user-name field. Now this field is used for the
authentication mechanism in DotGNU. Examples include:</P>
<BLOCKQUOTE>(1) rls://myrddian@dotgnu.org/authentication<BR>(2)
rls://fitzix@dotgnu.org/authentication<BR>(3)
rls://nb@dotgnu.org/auth<BR>(4) rls://myrddian@dotgnu.org/cvs</BLOCKQUOTE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So, here in these
examples, all use the authentication service (different names can be
used but convention should be followed). So it tells us, that user
myrddian is seeking authentication from server dotgnu.org. Another
less obvious example is that of self authentication. In number four,
user myrddian wants to use the CVS service but CVS may ask for
authentication, however the authentication data is on the local
server, so it will self verify.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The second
optional field is the tokens field, now tokens can contain any data,
be it a pointer back to another object or a string. The format of
tokens on how their data is represented is not enforced, the DotGNU
server will not enforce token data. The only exception to this rule
is separation of Token data, and or nesting of token data. These are
the only two rules enforced by the primary DotGNU server, everything
else and the data the tokens contains has to be enforced by the
individual service.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tokens are
separated using the ',' character, so &lt;token 1&gt;,&lt;token2&gt;
can be recognized separately. If a string may contain the comma
separator it is recommended that it be nested within &quot; &quot; as
this prevents premature separation.</P>
<P><STRONG>Token examples:</STRONG></P>
<BLOCKQUOTE>(1) rls://dotgnu.org/spell:&quot;I%20wnt%20to%20chke%20my,%20
speeling&quot;<BR>(2) rls://dotgnu.org/cvs:checkout,checkin</BLOCKQUOTE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In the first a
string is passed and contains the comma character but it's nested
inside quotes hence it's ignored. 
</P>
<P><BR><BR>
</P>
<P><STRONG>Nested tokens:</STRONG></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Nested tokens have
two ways to separate the data, one way is to have the entire nested
data within square brackets, the other is to have an identifier
before the square brackets. Now, the first format might be useful to
encase other RLS on to the same string, an example of this the first
would contain the where the service the second where authentication
can be found for the user requesting the service. Tokens with an
identifier may contain other data other than nested RLS's. Examples
include:</P>
<BLOCKQUOTE>(1)
rls://dotgnu.org/cvs:[myrddian@someisp.com:authentication]<BR>(2)
rls://dotgnu.org/im:msg[&quot;hey&quot;,&quot;what&quot;]<BR>(3)
rls://dotgnu.org/cvs:[rls://myrddian@someisp.com/auth],cmd[checkout[.],
checkin]</BLOCKQUOTE>
<P>Number 1 uses another RLS to check authentication for the CVS
service.<BR>Number 2 uses a named nested token and it has two extra
fields inside.<BR>Number 3 has both separation and nesting
examples.<BR><BR>Form and Get operations are used  to retreive
tokens. <BR><BR><BR>
</P>
<H1><U>Conclusion</U></H1>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;With the optional
nesting fields, RLS's can point to any data. Their simplification has
lead to better versatility. Because the tokens can point to any data,
the data pointed to can be encrypted. While the RLS string it self
may be transported over a secure encrypted protocol to provide better
security. Tokens can also contain nested encryption keys, thus
allowing even better security.</P>
</BODY>
</HTML>