<?xml version="1.0"?>
<class_status>
	<class name="System.AppDomain" assembly="mscorlib">
		<method name="Unload" signature="static System.Void Unload(System.AppDomain domain)">
			<todo/>
		</method>
		<event name="AssemblyLoad">
			<msg>should have attributes `public &apos;, but has `public final virtual newslot &apos; instead</msg>
		</event>
		<event name="DomainUnload">
			<msg>should have attributes `public &apos;, but has `public final virtual newslot &apos; instead</msg>
		</event>
		<event name="UnhandledException">
			<msg>should have attributes `public &apos;, but has `public final virtual newslot &apos; instead</msg>
		</event>
	</class>
	<class name="System.Array" assembly="mscorlib">
		<property name="IsFixedSize" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsReadOnly" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsSynchronized" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="LongLength" type="System.Int64">
			<msg>should have attributes `/* unknown_method_access */ static final virtual hidebysig abstract specialname unmanagedexp rtspecialname /* unknown_bits: 0x5200 */ &apos;, but has `public hidebysig specialname &apos; instead</msg>
		</property>
		<property name="SyncRoot" type="System.Object">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="System.Collections.ICollection.Count" type="System.Int32">
			<missing/>
		</property>
		<property name="System.Collections.IList.Item" type="System.Object">
			<missing/>
		</property>
	</class>
	<class name="System.Attribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.All, AllowMultiple=false, Inherited=true)">
			<missing/>
		</attribute>
	</class>
	<class name="System.AttributeUsageAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Class, AllowMultiple=false, Inherited=true)">
			<missing/>
		</attribute>
	</class>
	<class name="System.CLSCompliantAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.All, AllowMultiple=false, Inherited=true)">
			<missing/>
		</attribute>
	</class>
	<class name="System.CharEnumerator" assembly="mscorlib">
		<property name="System.Collections.IEnumerator.Current" type="System.Object">
			<missing/>
		</property>
	</class>
	<class name="System.Console" assembly="mscorlib">
		<method name="OpenStandardError" signature="static System.IO.Stream OpenStandardError(System.Int32 bufferSize)">
			<todo/>
		</method>
		<method name="OpenStandardInput" signature="static System.IO.Stream OpenStandardInput(System.Int32 bufferSize)">
			<todo/>
		</method>
		<method name="OpenStandardOutput" signature="static System.IO.Stream OpenStandardOutput(System.Int32 bufferSize)">
			<todo/>
		</method>
		<method name="Read" signature="static System.Int32 Read()">
			<todo/>
		</method>
		<method name="ReadLine" signature="static System.String ReadLine()">
			<todo/>
		</method>
	</class>
	<class name="System.DateTime" assembly="mscorlib">
		<method name="Compare" signature="static System.Int32 Compare(System.DateTime t1, System.DateTime t2)">
			<missing/>
		</method>
		<method name="Parse" signature="static System.DateTime Parse(System.String s)">
			<todo/>
		</method>
		<method name="Parse" signature="static System.DateTime Parse(System.String s, System.IFormatProvider provider)">
			<todo/>
		</method>
		<method name="Parse" signature="static System.DateTime Parse(System.String s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles)">
			<todo/>
		</method>
		<method name="ParseExact" signature="static System.DateTime ParseExact(System.String s, System.String format, System.IFormatProvider provider)">
			<todo/>
		</method>
		<method name="ParseExact" signature="static System.DateTime ParseExact(System.String s, System.String format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style)">
			<todo/>
		</method>
		<method name="ParseExact" signature="static System.DateTime ParseExact(System.String s, System.String[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style)">
			<todo/>
		</method>
		<method name="ToString" signature="System.String ToString(System.String format, System.IFormatProvider provider)">
			<todo/>
		</method>
	</class>
	<class name="System.Decimal" assembly="mscorlib">
		<field name="MaxValue" type="System.Decimal">
			<attribute name="DecimalConstantAttribute(79228162514264337593543950335, 79228162514264337593543950335, 79228162514264337593543950335, 79228162514264337593543950335, 79228162514264337593543950335)">
				<missing/>
			</attribute>
			<attribute name="DecimalConstantAttribute(0, 0, 4294967295, 4294967295, 4294967295)">
				<extra/>
			</attribute>
		</field>
		<field name="MinValue" type="System.Decimal">
			<attribute name="DecimalConstantAttribute(-79228162514264337593543950335, -79228162514264337593543950335, -79228162514264337593543950335, -79228162514264337593543950335, -79228162514264337593543950335)">
				<missing/>
			</attribute>
			<attribute name="DecimalConstantAttribute(0, 128, 4294967295, 4294967295, 4294967295)">
				<extra/>
			</attribute>
		</field>
		<field name="MinusOne" type="System.Decimal">
			<attribute name="DecimalConstantAttribute(-1, -1, -1, -1, -1)">
				<missing/>
			</attribute>
			<attribute name="DecimalConstantAttribute(0, 128, 0, 0, 1)">
				<extra/>
			</attribute>
		</field>
		<field name="One" type="System.Decimal">
			<attribute name="DecimalConstantAttribute(1, 1, 1, 1, 1)">
				<missing/>
			</attribute>
			<attribute name="DecimalConstantAttribute(0, 0, 0, 0, 1)">
				<extra/>
			</attribute>
		</field>
	</class>
	<class name="System.Environment" assembly="mscorlib">
		<property name="HasShutdownStarted" type="System.Boolean">
			<todo/>
		</property>
		<property name="Version" type="System.Version">
			<todo/>
		</property>
	</class>
	<class name="System.FlagsAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Enum, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Math" assembly="mscorlib">
		<method name="DivRem" signature="static System.Int32 DivRem(System.Int32 a, System.Int32 b, System.Int32 result)">
			<missing/>
		</method>
		<method name="DivRem" signature="static System.Int64 DivRem(System.Int64 a, System.Int64 b, System.Int64 result)">
			<missing/>
		</method>
	</class>
	<class name="System.ObsoleteAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.ParamArrayAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Parameter, AllowMultiple=false, Inherited=true)">
			<missing/>
		</attribute>
	</class>
	<class name="System.String" assembly="mscorlib">
		<method name="Format" signature="static System.String Format(System.IFormatProvider provider, System.String format, System.Object[] args)">
			<todo/>
		</method>
	</class>
	<class name="System.TimeSpan" assembly="mscorlib">
		<method name="Parse" signature="static System.TimeSpan Parse(System.String s)">
			<todo/>
		</method>
	</class>
	<class name="System.Type" assembly="mscorlib">
		<method name="GetMethod" signature="System.Reflection.MethodInfo GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)">
			<msg>should have attributes `public final virtual hidebysig &apos;, but has `public virtual hidebysig &apos; instead</msg>
		</method>
		<method name="GetMethod" signature="System.Reflection.MethodInfo GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)">
			<msg>should have attributes `public final virtual hidebysig &apos;, but has `public virtual hidebysig &apos; instead</msg>
		</method>
		<method name="GetProperty" signature="System.Reflection.PropertyInfo GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)">
			<msg>should have attributes `public final virtual hidebysig &apos;, but has `public virtual hidebysig &apos; instead</msg>
		</method>
		<method name="GetProperty" signature="System.Reflection.PropertyInfo GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)">
			<msg>should have attributes `public final virtual hidebysig &apos;, but has `public virtual hidebysig &apos; instead</msg>
		</method>
		<field name="EmptyTypes" type="System.Type">
			<msg>should have type `System.Type&apos;, but has `System.Type[]&apos; instead</msg>
		</field>
	</class>
	<class name="System.Uri" assembly="System">
		<missing/>
		<ctor signature="System.Uri(System.String uriString)">
			<missing/>
		</ctor>
		<ctor signature="System.Uri(System.String uriString, System.Boolean dontEscape)">
			<missing/>
		</ctor>
		<ctor signature="System.Uri(System.Uri baseUri, System.String relativeUri)">
			<missing/>
		</ctor>
		<ctor signature="System.Uri(System.Uri baseUri, System.String relativeUri, System.Boolean dontEscape)">
			<missing/>
		</ctor>
		<method name="Canonicalize" signature="System.Void Canonicalize()">
			<missing/>
		</method>
		<method name="CheckHostName" signature="static System.UriHostNameType CheckHostName(System.String name)">
			<missing/>
		</method>
		<method name="CheckSchemeName" signature="static System.Boolean CheckSchemeName(System.String schemeName)">
			<missing/>
		</method>
		<method name="CheckSecurity" signature="System.Void CheckSecurity()">
			<missing/>
		</method>
		<method name="Equals" signature="System.Boolean Equals(System.Object comparand)">
			<missing/>
		</method>
		<method name="Escape" signature="System.Void Escape()">
			<missing/>
		</method>
		<method name="EscapeString" signature="static System.String EscapeString(System.String str)">
			<missing/>
		</method>
		<method name="FromHex" signature="static System.Int32 FromHex(System.Char digit)">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="GetLeftPart" signature="System.String GetLeftPart(System.UriPartial part)">
			<missing/>
		</method>
		<method name="HexEscape" signature="static System.String HexEscape(System.Char character)">
			<missing/>
		</method>
		<method name="HexUnescape" signature="static System.Char HexUnescape(System.String pattern, System.Int32&amp; index)">
			<missing/>
		</method>
		<method name="IsBadFileSystemCharacter" signature="System.Boolean IsBadFileSystemCharacter(System.Char character)">
			<missing/>
		</method>
		<method name="IsExcludedCharacter" signature="static System.Boolean IsExcludedCharacter(System.Char character)">
			<missing/>
		</method>
		<method name="IsHexDigit" signature="static System.Boolean IsHexDigit(System.Char character)">
			<missing/>
		</method>
		<method name="IsHexEncoding" signature="static System.Boolean IsHexEncoding(System.String pattern, System.Int32 index)">
			<missing/>
		</method>
		<method name="IsReservedCharacter" signature="System.Boolean IsReservedCharacter(System.Char character)">
			<missing/>
		</method>
		<method name="MakeRelative" signature="System.String MakeRelative(System.Uri toUri)">
			<missing/>
		</method>
		<method name="Parse" signature="System.Void Parse()">
			<missing/>
		</method>
		<method name="ToString" signature="System.String ToString()">
			<missing/>
		</method>
		<method name="Unescape" signature="System.String Unescape(System.String path)">
			<missing/>
		</method>
		<field name="SchemeDelimiter" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeFile" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeFtp" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeGopher" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeHttp" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeHttps" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeMailto" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeNews" type="System.String">
			<missing/>
		</field>
		<field name="UriSchemeNntp" type="System.String">
			<missing/>
		</field>
		<property name="AbsolutePath" type="System.String">
			<missing/>
		</property>
		<property name="AbsoluteUri" type="System.String">
			<missing/>
		</property>
		<property name="Authority" type="System.String">
			<missing/>
		</property>
		<property name="Fragment" type="System.String">
			<missing/>
		</property>
		<property name="Host" type="System.String">
			<missing/>
		</property>
		<property name="HostNameType" type="System.UriHostNameType">
			<missing/>
		</property>
		<property name="IsDefaultPort" type="System.Boolean">
			<missing/>
		</property>
		<property name="IsFile" type="System.Boolean">
			<missing/>
		</property>
		<property name="IsLoopback" type="System.Boolean">
			<missing/>
		</property>
		<property name="LocalPath" type="System.String">
			<missing/>
		</property>
		<property name="PathAndQuery" type="System.String">
			<missing/>
		</property>
		<property name="Port" type="System.Int32">
			<missing/>
		</property>
		<property name="Query" type="System.String">
			<missing/>
		</property>
		<property name="Scheme" type="System.String">
			<missing/>
		</property>
		<property name="UserEscaped" type="System.Boolean">
			<missing/>
		</property>
		<property name="UserInfo" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.UriBuilder" assembly="System">
		<missing/>
		<ctor signature="System.UriBuilder()">
			<missing/>
		</ctor>
		<ctor signature="System.UriBuilder(System.String uri)">
			<missing/>
		</ctor>
		<ctor signature="System.UriBuilder(System.Uri uri)">
			<missing/>
		</ctor>
		<ctor signature="System.UriBuilder(System.String schemeName, System.String hostName)">
			<missing/>
		</ctor>
		<ctor signature="System.UriBuilder(System.String scheme, System.String host, System.Int32 portNumber)">
			<missing/>
		</ctor>
		<ctor signature="System.UriBuilder(System.String scheme, System.String host, System.Int32 port, System.String pathValue)">
			<missing/>
		</ctor>
		<ctor signature="System.UriBuilder(System.String scheme, System.String host, System.Int32 port, System.String path, System.String extraValue)">
			<missing/>
		</ctor>
		<method name="Equals" signature="System.Boolean Equals(System.Object rparam)">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="ToString" signature="System.String ToString()">
			<missing/>
		</method>
		<property name="Fragment" type="System.String">
			<missing/>
		</property>
		<property name="Host" type="System.String">
			<missing/>
		</property>
		<property name="Password" type="System.String">
			<missing/>
		</property>
		<property name="Path" type="System.String">
			<missing/>
		</property>
		<property name="Port" type="System.Int32">
			<missing/>
		</property>
		<property name="Query" type="System.String">
			<missing/>
		</property>
		<property name="Scheme" type="System.String">
			<missing/>
		</property>
		<property name="Uri" type="System.Uri">
			<missing/>
		</property>
		<property name="UserName" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.UriFormatException" assembly="System">
		<missing/>
		<ctor signature="System.UriFormatException()">
			<missing/>
		</ctor>
		<ctor signature="System.UriFormatException(System.String textString)">
			<missing/>
		</ctor>
	</class>
	<class name="System.UriHostNameType" assembly="System">
		<missing/>
		<field name="Dns" type="System.UriHostNameType">
			<missing/>
		</field>
		<field name="IPv4" type="System.UriHostNameType">
			<missing/>
		</field>
		<field name="IPv6" type="System.UriHostNameType">
			<missing/>
		</field>
		<field name="Unknown" type="System.UriHostNameType">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.UriPartial" assembly="System">
		<missing/>
		<field name="Authority" type="System.UriPartial">
			<missing/>
		</field>
		<field name="Path" type="System.UriPartial">
			<missing/>
		</field>
		<field name="Scheme" type="System.UriPartial">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Version" assembly="mscorlib">
		<ctor signature="System.Version(System.String version)">
			<todo/>
		</ctor>
	</class>
	<class name="System.Collections.ArrayList" assembly="mscorlib">
		<method name="InsertRange" signature="System.Void InsertRange(System.Int32 index, System.Collections.ICollection c)">
			<missing/>
		</method>
		<property name="Count" type="System.Int32">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsFixedSize" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsReadOnly" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsSynchronized" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="SyncRoot" type="System.Object">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
	</class>
	<class name="System.Collections.Hashtable" assembly="mscorlib">
		<property name="Count" type="System.Int32">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsFixedSize" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsReadOnly" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsSynchronized" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="Keys" type="System.Collections.ICollection">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="SyncRoot" type="System.Object">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="Values" type="System.Collections.ICollection">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
	</class>
	<class name="System.Collections.Specialized.NameValueCollection" assembly="System">
		<missing/>
		<ctor signature="System.Collections.Specialized.NameValueCollection()">
			<missing/>
		</ctor>
		<ctor signature="System.Collections.Specialized.NameValueCollection(System.Collections.Specialized.NameValueCollection col)">
			<missing/>
		</ctor>
		<ctor signature="System.Collections.Specialized.NameValueCollection(System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer)">
			<missing/>
		</ctor>
		<ctor signature="System.Collections.Specialized.NameValueCollection(System.Int32 capacity)">
			<missing/>
		</ctor>
		<ctor signature="System.Collections.Specialized.NameValueCollection(System.Int32 capacity, System.Collections.Specialized.NameValueCollection col)">
			<missing/>
		</ctor>
		<ctor signature="System.Collections.Specialized.NameValueCollection(System.Int32 capacity, System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer)">
			<missing/>
		</ctor>
		<method name="Add" signature="System.Void Add(System.String name, System.String value)">
			<missing/>
		</method>
		<method name="Add" signature="System.Void Add(System.Collections.Specialized.NameValueCollection c)">
			<missing/>
		</method>
		<method name="Clear" signature="System.Void Clear()">
			<missing/>
		</method>
		<method name="CopyTo" signature="System.Void CopyTo(System.Array dest, System.Int32 index)">
			<missing/>
		</method>
		<method name="Get" signature="System.String Get(System.Int32 index)">
			<missing/>
		</method>
		<method name="Get" signature="System.String Get(System.String name)">
			<missing/>
		</method>
		<method name="GetKey" signature="System.String GetKey(System.Int32 index)">
			<missing/>
		</method>
		<method name="GetValues" signature="System.String[] GetValues(System.Int32 index)">
			<missing/>
		</method>
		<method name="GetValues" signature="System.String[] GetValues(System.String name)">
			<missing/>
		</method>
		<method name="HasKeys" signature="System.Boolean HasKeys()">
			<missing/>
		</method>
		<method name="InvalidateCachedArrays" signature="System.Void InvalidateCachedArrays()">
			<missing/>
		</method>
		<method name="Remove" signature="System.Void Remove(System.String name)">
			<missing/>
		</method>
		<method name="Set" signature="System.Void Set(System.String name, System.String value)">
			<missing/>
		</method>
		<property name="AllKeys" type="System.String[]">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Diagnostics.ConditionalAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Method, AllowMultiple=true, Inherited=true)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Globalization.DateTimeFormatInfo" assembly="mscorlib">
		<method name="GetEra" signature="System.Int32 GetEra(System.String eraName)">
			<todo/>
		</method>
		<method name="GetEraName" signature="System.String GetEraName(System.Int32 era)">
			<todo/>
		</method>
	</class>
	<class name="System.IO.Directory" assembly="mscorlib">
		<missing/>
		<method name="Delete" signature="static System.Void Delete(System.String path)">
			<missing/>
		</method>
		<method name="Delete" signature="static System.Void Delete(System.String path, System.Boolean recursive)">
			<missing/>
		</method>
		<method name="Exists" signature="static System.Boolean Exists(System.String path)">
			<missing/>
		</method>
		<method name="GetCreationTime" signature="static System.DateTime GetCreationTime(System.String path)">
			<missing/>
		</method>
		<method name="GetCurrentDirectory" signature="static System.String GetCurrentDirectory()">
			<missing/>
		</method>
		<method name="GetDirectories" signature="static System.String[] GetDirectories(System.String path)">
			<missing/>
		</method>
		<method name="GetDirectories" signature="static System.String[] GetDirectories(System.String path, System.String searchPattern)">
			<missing/>
		</method>
		<method name="GetDirectoryRoot" signature="static System.String GetDirectoryRoot(System.String path)">
			<missing/>
		</method>
		<method name="GetFileSystemEntries" signature="static System.String[] GetFileSystemEntries(System.String path)">
			<missing/>
		</method>
		<method name="GetFileSystemEntries" signature="static System.String[] GetFileSystemEntries(System.String path, System.String searchPattern)">
			<missing/>
		</method>
		<method name="GetFiles" signature="static System.String[] GetFiles(System.String path)">
			<missing/>
		</method>
		<method name="GetFiles" signature="static System.String[] GetFiles(System.String path, System.String searchPattern)">
			<missing/>
		</method>
		<method name="GetLastAccessTime" signature="static System.DateTime GetLastAccessTime(System.String path)">
			<missing/>
		</method>
		<method name="GetLastWriteTime" signature="static System.DateTime GetLastWriteTime(System.String path)">
			<missing/>
		</method>
		<method name="Move" signature="static System.Void Move(System.String sourceDirName, System.String destDirName)">
			<missing/>
		</method>
		<method name="SetCreationTime" signature="static System.Void SetCreationTime(System.String path, System.DateTime creationTime)">
			<missing/>
		</method>
		<method name="SetCurrentDirectory" signature="static System.Void SetCurrentDirectory(System.String path)">
			<missing/>
		</method>
		<method name="SetLastAccessTime" signature="static System.Void SetLastAccessTime(System.String path, System.DateTime lastAccessTime)">
			<missing/>
		</method>
		<method name="SetLastWriteTime" signature="static System.Void SetLastWriteTime(System.String path, System.DateTime lastWriteTime)">
			<missing/>
		</method>
	</class>
	<class name="System.IO.File" assembly="mscorlib">
		<missing/>
		<method name="AppendText" signature="static System.IO.StreamWriter AppendText(System.String path)">
			<missing/>
		</method>
		<method name="Copy" signature="static System.Void Copy(System.String sourceFileName, System.String destFileName)">
			<missing/>
		</method>
		<method name="Copy" signature="static System.Void Copy(System.String sourceFileName, System.String destFileName, System.Boolean overwrite)">
			<missing/>
		</method>
		<method name="Create" signature="static System.IO.FileStream Create(System.String path)">
			<missing/>
		</method>
		<method name="Create" signature="static System.IO.FileStream Create(System.String path, System.Int32 bufferSize)">
			<missing/>
		</method>
		<method name="CreateText" signature="static System.IO.StreamWriter CreateText(System.String path)">
			<missing/>
		</method>
		<method name="Delete" signature="static System.Void Delete(System.String path)">
			<missing/>
		</method>
		<method name="Exists" signature="static System.Boolean Exists(System.String path)">
			<missing/>
		</method>
		<method name="GetCreationTime" signature="static System.DateTime GetCreationTime(System.String path)">
			<missing/>
		</method>
		<method name="GetLastAccessTime" signature="static System.DateTime GetLastAccessTime(System.String path)">
			<missing/>
		</method>
		<method name="GetLastWriteTime" signature="static System.DateTime GetLastWriteTime(System.String path)">
			<missing/>
		</method>
		<method name="Move" signature="static System.Void Move(System.String sourceFileName, System.String destFileName)">
			<missing/>
		</method>
		<method name="Open" signature="static System.IO.FileStream Open(System.String path, System.IO.FileMode mode)">
			<missing/>
		</method>
		<method name="Open" signature="static System.IO.FileStream Open(System.String path, System.IO.FileMode mode, System.IO.FileAccess access)">
			<missing/>
		</method>
		<method name="Open" signature="static System.IO.FileStream Open(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)">
			<missing/>
		</method>
		<method name="OpenRead" signature="static System.IO.FileStream OpenRead(System.String path)">
			<missing/>
		</method>
		<method name="OpenText" signature="static System.IO.StreamReader OpenText(System.String path)">
			<missing/>
		</method>
		<method name="OpenWrite" signature="static System.IO.FileStream OpenWrite(System.String path)">
			<missing/>
		</method>
		<method name="SetCreationTime" signature="static System.Void SetCreationTime(System.String path, System.DateTime creationTime)">
			<missing/>
		</method>
		<method name="SetLastAccessTime" signature="static System.Void SetLastAccessTime(System.String path, System.DateTime lastAccessTime)">
			<missing/>
		</method>
		<method name="SetLastWriteTime" signature="static System.Void SetLastWriteTime(System.String path, System.DateTime lastWriteTime)">
			<missing/>
		</method>
	</class>
	<class name="System.IO.FileStream" assembly="mscorlib">
		<method name="BeginRead" signature="System.IAsyncResult BeginRead(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)">
			<todo/>
		</method>
		<method name="BeginWrite" signature="System.IAsyncResult BeginWrite(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)">
			<todo/>
		</method>
		<method name="EndRead" signature="System.Int32 EndRead(System.IAsyncResult asyncResult)">
			<todo/>
		</method>
		<method name="EndWrite" signature="System.Void EndWrite(System.IAsyncResult asyncResult)">
			<todo/>
		</method>
	</class>
	<class name="System.IO.MemoryStream" assembly="mscorlib">
		<missing/>
		<ctor signature="System.IO.MemoryStream()">
			<missing/>
		</ctor>
		<ctor signature="System.IO.MemoryStream(System.Int32 capacity)">
			<missing/>
		</ctor>
		<ctor signature="System.IO.MemoryStream(System.Byte[] buffer)">
			<missing/>
		</ctor>
		<ctor signature="System.IO.MemoryStream(System.Byte[] buffer, System.Boolean writable)">
			<missing/>
		</ctor>
		<ctor signature="System.IO.MemoryStream(System.Byte[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</ctor>
		<ctor signature="System.IO.MemoryStream(System.Byte[] buffer, System.Int32 index, System.Int32 count, System.Boolean writable)">
			<missing/>
		</ctor>
		<ctor signature="System.IO.MemoryStream(System.Byte[] buffer, System.Int32 index, System.Int32 count, System.Boolean writable, System.Boolean publiclyVisible)">
			<missing/>
		</ctor>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="Flush" signature="System.Void Flush()">
			<missing/>
		</method>
		<method name="GetBuffer" signature="System.Byte[] GetBuffer()">
			<missing/>
		</method>
		<method name="Read" signature="System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)">
			<missing/>
		</method>
		<method name="ReadByte" signature="System.Int32 ReadByte()">
			<missing/>
		</method>
		<method name="Seek" signature="System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin loc)">
			<missing/>
		</method>
		<method name="SetLength" signature="System.Void SetLength(System.Int64 value)">
			<missing/>
		</method>
		<method name="ToArray" signature="System.Byte[] ToArray()">
			<missing/>
		</method>
		<method name="Write" signature="System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteByte" signature="System.Void WriteByte(System.Byte value)">
			<missing/>
		</method>
		<method name="WriteTo" signature="System.Void WriteTo(System.IO.Stream stream)">
			<missing/>
		</method>
		<property name="CanRead" type="System.Boolean">
			<missing/>
		</property>
		<property name="CanSeek" type="System.Boolean">
			<missing/>
		</property>
		<property name="CanWrite" type="System.Boolean">
			<missing/>
		</property>
		<property name="Capacity" type="System.Int32">
			<missing/>
		</property>
		<property name="Length" type="System.Int64">
			<missing/>
		</property>
		<property name="Position" type="System.Int64">
			<missing/>
		</property>
	</class>
	<class name="System.IO.Path" assembly="mscorlib">
		<method name="ChangeExtension" signature="static System.String ChangeExtension(System.String path, System.String extension)">
			<todo/>
		</method>
		<method name="GetDirectoryName" signature="static System.String GetDirectoryName(System.String path)">
			<todo/>
		</method>
		<method name="GetExtension" signature="static System.String GetExtension(System.String path)">
			<missing/>
		</method>
		<method name="GetFileName" signature="static System.String GetFileName(System.String path)">
			<todo/>
		</method>
		<method name="GetFileNameWithoutExtension" signature="static System.String GetFileNameWithoutExtension(System.String path)">
			<todo/>
		</method>
		<method name="GetFullPath" signature="static System.String GetFullPath(System.String path)">
			<todo/>
		</method>
		<method name="GetPathRoot" signature="static System.String GetPathRoot(System.String path)">
			<todo/>
		</method>
		<method name="GetTempFileName" signature="static System.String GetTempFileName()">
			<missing/>
		</method>
		<method name="GetTempPath" signature="static System.String GetTempPath()">
			<todo/>
		</method>
		<method name="HasExtension" signature="static System.Boolean HasExtension(System.String path)">
			<todo/>
		</method>
		<field name="PathSeparator" type="System.Char">
			<missing/>
		</field>
	</class>
	<class name="System.IO.Stream" assembly="mscorlib">
		<method name="BeginRead" signature="System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)">
			<todo/>
		</method>
		<method name="BeginWrite" signature="System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)">
			<todo/>
		</method>
		<method name="CreateWaitHandle" signature="System.Threading.WaitHandle CreateWaitHandle()">
			<todo/>
		</method>
		<method name="EndRead" signature="System.Int32 EndRead(System.IAsyncResult asyncResult)">
			<todo/>
		</method>
		<method name="EndWrite" signature="System.Void EndWrite(System.IAsyncResult asyncResult)">
			<todo/>
		</method>
	</class>
	<class name="System.IO.StreamReader" assembly="mscorlib">
		<method name="Peek" signature="System.Int32 Peek()">
			<todo/>
		</method>
		<method name="Read" signature="System.Int32 Read(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<todo/>
		</method>
		<method name="Read" signature="System.Int32 Read()">
			<todo/>
		</method>
		<method name="ReadLine" signature="System.String ReadLine()">
			<todo/>
		</method>
		<method name="ReadToEnd" signature="System.String ReadToEnd()">
			<todo/>
		</method>
	</class>
	<class name="System.IO.StreamWriter" assembly="mscorlib">
		<method name="Write" signature="System.Void Write(System.String value)">
			<todo/>
		</method>
		<method name="Write" signature="System.Void Write(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<todo/>
		</method>
		<method name="Write" signature="System.Void Write(System.Char value)">
			<todo/>
		</method>
	</class>
	<class name="System.IO.StringReader" assembly="mscorlib">
		<missing/>
		<ctor signature="System.IO.StringReader(System.String s)">
			<missing/>
		</ctor>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="Dispose" signature="System.Void Dispose(System.Boolean disposing)">
			<missing/>
		</method>
		<method name="Peek" signature="System.Int32 Peek()">
			<missing/>
		</method>
		<method name="Read" signature="System.Int32 Read(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="Read" signature="System.Int32 Read()">
			<missing/>
		</method>
		<method name="ReadLine" signature="System.String ReadLine()">
			<missing/>
		</method>
		<method name="ReadToEnd" signature="System.String ReadToEnd()">
			<missing/>
		</method>
	</class>
	<class name="System.IO.TextReader" assembly="mscorlib">
		<method name="ReadLine" signature="System.String ReadLine()">
			<todo/>
		</method>
		<method name="ReadToEnd" signature="System.String ReadToEnd()">
			<todo/>
		</method>
	</class>
	<class name="System.Net.AuthenticationManager" assembly="System">
		<missing/>
		<method name="Authenticate" signature="static System.Net.Authorization Authenticate(System.String challenge, System.Net.WebRequest request, System.Net.ICredentials credentials)">
			<missing/>
		</method>
		<method name="PreAuthenticate" signature="static System.Net.Authorization PreAuthenticate(System.Net.WebRequest request, System.Net.ICredentials credentials)">
			<missing/>
		</method>
		<method name="Register" signature="static System.Void Register(System.Net.IAuthenticationModule authenticationModule)">
			<missing/>
		</method>
		<method name="Unregister" signature="static System.Void Unregister(System.Net.IAuthenticationModule authenticationModule)">
			<missing/>
		</method>
		<method name="Unregister" signature="static System.Void Unregister(System.String authenticationScheme)">
			<missing/>
		</method>
		<property name="RegisteredModules" type="System.Collections.IEnumerator">
			<missing/>
		</property>
	</class>
	<class name="System.Net.Authorization" assembly="System">
		<missing/>
		<ctor signature="System.Net.Authorization(System.String token)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.Authorization(System.String token, System.Boolean finished)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.Authorization(System.String token, System.Boolean finished, System.String connectionGroupId)">
			<missing/>
		</ctor>
		<property name="Complete" type="System.Boolean">
			<missing/>
		</property>
		<property name="ConnectionGroupId" type="System.String">
			<missing/>
		</property>
		<property name="Message" type="System.String">
			<missing/>
		</property>
		<property name="ProtectionRealm" type="System.String[]">
			<missing/>
		</property>
	</class>
	<class name="System.Net.CredentialCache" assembly="System">
		<missing/>
		<ctor signature="System.Net.CredentialCache()">
			<missing/>
		</ctor>
		<method name="Add" signature="System.Void Add(System.Uri uriPrefix, System.String authType, System.Net.NetworkCredential cred)">
			<missing/>
		</method>
		<method name="GetCredential" signature="System.Net.NetworkCredential GetCredential(System.Uri uriPrefix, System.String authType)">
			<missing/>
		</method>
		<method name="GetEnumerator" signature="System.Collections.IEnumerator GetEnumerator()">
			<missing/>
		</method>
		<method name="Remove" signature="System.Void Remove(System.Uri uriPrefix, System.String authType)">
			<missing/>
		</method>
		<property name="DefaultCredentials" type="System.Net.ICredentials">
			<missing/>
		</property>
	</class>
	<class name="System.Net.Dns" assembly="System">
		<missing/>
		<method name="BeginGetHostByName" signature="static System.IAsyncResult BeginGetHostByName(System.String hostName, System.AsyncCallback requestCallback, System.Object stateObject)">
			<missing/>
		</method>
		<method name="BeginResolve" signature="static System.IAsyncResult BeginResolve(System.String hostName, System.AsyncCallback requestCallback, System.Object stateObject)">
			<missing/>
		</method>
		<method name="EndGetHostByName" signature="static System.Net.IPHostEntry EndGetHostByName(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndResolve" signature="static System.Net.IPHostEntry EndResolve(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="GetHostByAddress" signature="static System.Net.IPHostEntry GetHostByAddress(System.String address)">
			<missing/>
		</method>
		<method name="GetHostByAddress" signature="static System.Net.IPHostEntry GetHostByAddress(System.Net.IPAddress address)">
			<missing/>
		</method>
		<method name="GetHostByName" signature="static System.Net.IPHostEntry GetHostByName(System.String hostName)">
			<missing/>
		</method>
		<method name="GetHostName" signature="static System.String GetHostName()">
			<missing/>
		</method>
		<method name="Resolve" signature="static System.Net.IPHostEntry Resolve(System.String hostName)">
			<missing/>
		</method>
	</class>
	<class name="System.Net.DnsPermission" assembly="System">
		<missing/>
		<ctor signature="System.Net.DnsPermission(System.Security.Permissions.PermissionState state)">
			<missing/>
		</ctor>
		<method name="Copy" signature="System.Security.IPermission Copy()">
			<missing/>
		</method>
		<method name="FromXml" signature="System.Void FromXml(System.Security.SecurityElement securityElement)">
			<missing/>
		</method>
		<method name="Intersect" signature="System.Security.IPermission Intersect(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="ToXml" signature="System.Security.SecurityElement ToXml()">
			<missing/>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission target)">
			<missing/>
		</method>
	</class>
	<class name="System.Net.DnsPermissionAttribute" assembly="System">
		<missing/>
		<ctor signature="System.Net.DnsPermissionAttribute(System.Security.Permissions.SecurityAction action)">
			<missing/>
		</ctor>
		<method name="CreatePermission" signature="System.Security.IPermission CreatePermission()">
			<missing/>
		</method>
	</class>
	<class name="System.Net.EndPoint" assembly="System">
		<missing/>
		<ctor signature="System.Net.EndPoint()">
			<missing/>
		</ctor>
		<method name="Create" signature="System.Net.EndPoint Create(System.Net.SocketAddress socketAddress)">
			<missing/>
		</method>
		<property name="AddressFamily" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</property>
	</class>
	<class name="System.Net.GlobalProxySelection" assembly="System">
		<missing/>
		<ctor signature="System.Net.GlobalProxySelection()">
			<missing/>
		</ctor>
		<method name="GetEmptyWebProxy" signature="static System.Net.IWebProxy GetEmptyWebProxy()">
			<missing/>
		</method>
		<property name="Select" type="System.Net.IWebProxy">
			<missing/>
		</property>
	</class>
	<class name="System.Net.HttpContinueDelegate" assembly="System">
		<missing/>
	</class>
	<class name="System.Net.HttpStatusCode" assembly="System">
		<missing/>
		<field name="Accepted" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Ambiguous" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="BadGateway" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="BadRequest" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Conflict" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Continue" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Created" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="ExpectationFailed" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Forbidden" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Found" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="GatewayTimeout" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Gone" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="HttpVersionNotSupported" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="InternalServerError" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="LengthRequired" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="MethodNotAllowed" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Moved" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="MovedPermanently" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="MultipleChoices" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="NoContent" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="NonAuthoritativeInformation" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="NotAcceptable" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="NotFound" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="NotImplemented" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="NotModified" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="OK" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="PartialContent" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="PaymentRequired" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="PreconditionFailed" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="ProxyAuthenticationRequired" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Redirect" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="RedirectKeepVerb" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="RedirectMethod" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="RequestEntityTooLarge" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="RequestTimeout" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="RequestUriTooLong" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="RequestedRangeNotSatisfiable" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="ResetContent" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="SeeOther" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="ServiceUnavailable" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="SwitchingProtocols" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="TemporaryRedirect" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Unauthorized" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="UnsupportedMediaType" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="Unused" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="UseProxy" type="System.Net.HttpStatusCode">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.HttpVersion" assembly="System">
		<missing/>
		<ctor signature="System.Net.HttpVersion()">
			<missing/>
		</ctor>
		<field name="Version10" type="System.Version">
			<missing/>
		</field>
		<field name="Version11" type="System.Version">
			<missing/>
		</field>
	</class>
	<class name="System.Net.HttpWebRequest" assembly="System">
		<missing/>
		<method name="Abort" signature="System.Void Abort()">
			<missing/>
		</method>
		<method name="AddRange" signature="System.Void AddRange(System.Int32 from, System.Int32 to)">
			<missing/>
		</method>
		<method name="AddRange" signature="System.Void AddRange(System.Int32 range)">
			<missing/>
		</method>
		<method name="AddRange" signature="System.Void AddRange(System.String rangeSpecifier, System.Int32 from, System.Int32 to)">
			<missing/>
		</method>
		<method name="AddRange" signature="System.Void AddRange(System.String rangeSpecifier, System.Int32 range)">
			<missing/>
		</method>
		<method name="BeginGetRequestStream" signature="System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginGetResponse" signature="System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="EndGetRequestStream" signature="System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndGetResponse" signature="System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="GetRequestStream" signature="System.IO.Stream GetRequestStream()">
			<missing/>
		</method>
		<method name="GetResponse" signature="System.Net.WebResponse GetResponse()">
			<missing/>
		</method>
		<property name="Accept" type="System.String">
			<missing/>
		</property>
		<property name="Address" type="System.Uri">
			<missing/>
		</property>
		<property name="AllowAutoRedirect" type="System.Boolean">
			<missing/>
		</property>
		<property name="AllowWriteStreamBuffering" type="System.Boolean">
			<missing/>
		</property>
		<property name="Connection" type="System.String">
			<missing/>
		</property>
		<property name="ConnectionGroupName" type="System.String">
			<missing/>
		</property>
		<property name="ContentLength" type="System.Int64">
			<missing/>
		</property>
		<property name="ContentType" type="System.String">
			<missing/>
		</property>
		<property name="ContinueDelegate" type="System.Net.HttpContinueDelegate">
			<missing/>
		</property>
		<property name="Credentials" type="System.Net.ICredentials">
			<missing/>
		</property>
		<property name="Expect" type="System.String">
			<missing/>
		</property>
		<property name="HaveResponse" type="System.Boolean">
			<missing/>
		</property>
		<property name="Headers" type="System.Net.WebHeaderCollection">
			<missing/>
		</property>
		<property name="IfModifiedSince" type="System.DateTime">
			<missing/>
		</property>
		<property name="KeepAlive" type="System.Boolean">
			<missing/>
		</property>
		<property name="MaximumAutomaticRedirections" type="System.Int32">
			<missing/>
		</property>
		<property name="MediaType" type="System.String">
			<missing/>
		</property>
		<property name="Method" type="System.String">
			<missing/>
		</property>
		<property name="Pipelined" type="System.Boolean">
			<missing/>
		</property>
		<property name="PreAuthenticate" type="System.Boolean">
			<missing/>
		</property>
		<property name="ProtocolVersion" type="System.Version">
			<missing/>
		</property>
		<property name="Proxy" type="System.Net.IWebProxy">
			<missing/>
		</property>
		<property name="Referer" type="System.String">
			<missing/>
		</property>
		<property name="RequestUri" type="System.Uri">
			<missing/>
		</property>
		<property name="SendChunked" type="System.Boolean">
			<missing/>
		</property>
		<property name="ServicePoint" type="System.Net.ServicePoint">
			<missing/>
		</property>
		<property name="Timeout" type="System.Int32">
			<missing/>
		</property>
		<property name="TransferEncoding" type="System.String">
			<missing/>
		</property>
		<property name="UserAgent" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Net.HttpWebResponse" assembly="System">
		<missing/>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="Dispose" signature="System.Void Dispose(System.Boolean disposing)">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="GetResponseHeader" signature="System.String GetResponseHeader(System.String headerName)">
			<missing/>
		</method>
		<method name="GetResponseStream" signature="System.IO.Stream GetResponseStream()">
			<missing/>
		</method>
		<property name="CharacterSet" type="System.String">
			<missing/>
		</property>
		<property name="ContentEncoding" type="System.String">
			<missing/>
		</property>
		<property name="ContentLength" type="System.Int64">
			<missing/>
		</property>
		<property name="ContentType" type="System.String">
			<missing/>
		</property>
		<property name="Headers" type="System.Net.WebHeaderCollection">
			<missing/>
		</property>
		<property name="LastModified" type="System.DateTime">
			<missing/>
		</property>
		<property name="Method" type="System.String">
			<missing/>
		</property>
		<property name="ProtocolVersion" type="System.Version">
			<missing/>
		</property>
		<property name="ResponseUri" type="System.Uri">
			<missing/>
		</property>
		<property name="Server" type="System.String">
			<missing/>
		</property>
		<property name="StatusCode" type="System.Net.HttpStatusCode">
			<missing/>
		</property>
		<property name="StatusDescription" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Net.IAuthenticationModule" assembly="System">
		<missing/>
		<method name="Authenticate" signature="System.Net.Authorization Authenticate(System.String challenge, System.Net.WebRequest request, System.Net.ICredentials credentials)">
			<missing/>
		</method>
		<method name="PreAuthenticate" signature="System.Net.Authorization PreAuthenticate(System.Net.WebRequest request, System.Net.ICredentials credentials)">
			<missing/>
		</method>
		<property name="AuthenticationType" type="System.String">
			<missing/>
		</property>
		<property name="CanPreAuthenticate" type="System.Boolean">
			<missing/>
		</property>
	</class>
	<class name="System.Net.ICredentials" assembly="System">
		<missing/>
		<method name="GetCredential" signature="System.Net.NetworkCredential GetCredential(System.Uri uri, System.String authType)">
			<missing/>
		</method>
	</class>
	<class name="System.Net.IPAddress" assembly="System">
		<missing/>
		<ctor signature="System.Net.IPAddress(System.Int64 newAddress)">
			<missing/>
		</ctor>
		<method name="Equals" signature="System.Boolean Equals(System.Object comparand)">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="HostToNetworkOrder" signature="static System.Int64 HostToNetworkOrder(System.Int64 host)">
			<missing/>
		</method>
		<method name="HostToNetworkOrder" signature="static System.Int32 HostToNetworkOrder(System.Int32 host)">
			<missing/>
		</method>
		<method name="HostToNetworkOrder" signature="static System.Int16 HostToNetworkOrder(System.Int16 host)">
			<missing/>
		</method>
		<method name="IsLoopback" signature="static System.Boolean IsLoopback(System.Net.IPAddress address)">
			<missing/>
		</method>
		<method name="NetworkToHostOrder" signature="static System.Int64 NetworkToHostOrder(System.Int64 network)">
			<missing/>
		</method>
		<method name="NetworkToHostOrder" signature="static System.Int32 NetworkToHostOrder(System.Int32 network)">
			<missing/>
		</method>
		<method name="NetworkToHostOrder" signature="static System.Int16 NetworkToHostOrder(System.Int16 network)">
			<missing/>
		</method>
		<method name="Parse" signature="static System.Net.IPAddress Parse(System.String ipString)">
			<missing/>
		</method>
		<method name="ToString" signature="System.String ToString()">
			<missing/>
		</method>
		<field name="Any" type="System.Net.IPAddress">
			<missing/>
		</field>
		<field name="Broadcast" type="System.Net.IPAddress">
			<missing/>
		</field>
		<field name="Loopback" type="System.Net.IPAddress">
			<missing/>
		</field>
		<field name="None" type="System.Net.IPAddress">
			<missing/>
		</field>
		<property name="Address" type="System.Int64">
			<missing/>
		</property>
		<property name="AddressFamily" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</property>
	</class>
	<class name="System.Net.IPEndPoint" assembly="System">
		<missing/>
		<ctor signature="System.Net.IPEndPoint(System.Int64 address, System.Int32 port)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.IPEndPoint(System.Net.IPAddress address, System.Int32 port)">
			<missing/>
		</ctor>
		<method name="Create" signature="System.Net.EndPoint Create(System.Net.SocketAddress socketAddress)">
			<missing/>
		</method>
		<method name="Equals" signature="System.Boolean Equals(System.Object comparand)">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="ToString" signature="System.String ToString()">
			<missing/>
		</method>
		<field name="MaxPort" type="System.Int32">
			<missing/>
		</field>
		<field name="MinPort" type="System.Int32">
			<missing/>
		</field>
		<property name="Address" type="System.Net.IPAddress">
			<missing/>
		</property>
		<property name="AddressFamily" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</property>
		<property name="Port" type="System.Int32">
			<missing/>
		</property>
	</class>
	<class name="System.Net.IPHostEntry" assembly="System">
		<missing/>
		<ctor signature="System.Net.IPHostEntry()">
			<missing/>
		</ctor>
		<property name="AddressList" type="System.Net.IPAddress[]">
			<missing/>
		</property>
		<property name="Aliases" type="System.String[]">
			<missing/>
		</property>
		<property name="HostName" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Net.IWebProxy" assembly="System">
		<missing/>
		<method name="GetProxy" signature="System.Uri GetProxy(System.Uri destination)">
			<missing/>
		</method>
		<method name="IsBypassed" signature="System.Boolean IsBypassed(System.Uri host)">
			<missing/>
		</method>
		<property name="Credentials" type="System.Net.ICredentials">
			<missing/>
		</property>
	</class>
	<class name="System.Net.IWebRequestCreate" assembly="System">
		<missing/>
		<method name="Create" signature="System.Net.WebRequest Create(System.Uri uri)">
			<missing/>
		</method>
	</class>
	<class name="System.Net.NetworkAccess" assembly="System">
		<missing/>
		<field name="Accept" type="System.Net.NetworkAccess">
			<missing/>
		</field>
		<field name="Connect" type="System.Net.NetworkAccess">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.NetworkCredential" assembly="System">
		<missing/>
		<ctor signature="System.Net.NetworkCredential()">
			<missing/>
		</ctor>
		<ctor signature="System.Net.NetworkCredential(System.String userName, System.String password)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.NetworkCredential(System.String userName, System.String password, System.String domain)">
			<missing/>
		</ctor>
		<method name="GetCredential" signature="System.Net.NetworkCredential GetCredential(System.Uri uri, System.String authType)">
			<missing/>
		</method>
		<property name="Domain" type="System.String">
			<missing/>
		</property>
		<property name="Password" type="System.String">
			<missing/>
		</property>
		<property name="UserName" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Net.ProtocolViolationException" assembly="System">
		<missing/>
		<ctor signature="System.Net.ProtocolViolationException()">
			<missing/>
		</ctor>
		<ctor signature="System.Net.ProtocolViolationException(System.String message)">
			<missing/>
		</ctor>
	</class>
	<class name="System.Net.ServicePoint" assembly="System">
		<missing/>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<property name="Address" type="System.Uri">
			<missing/>
		</property>
		<property name="ConnectionLimit" type="System.Int32">
			<missing/>
		</property>
		<property name="ConnectionName" type="System.String">
			<missing/>
		</property>
		<property name="CurrentConnections" type="System.Int32">
			<missing/>
		</property>
		<property name="IdleSince" type="System.DateTime">
			<missing/>
		</property>
		<property name="MaxIdleTime" type="System.Int32">
			<missing/>
		</property>
		<property name="ProtocolVersion" type="System.Version">
			<missing/>
		</property>
		<property name="SupportsPipelining" type="System.Boolean">
			<missing/>
		</property>
	</class>
	<class name="System.Net.ServicePointManager" assembly="System">
		<missing/>
		<method name="FindServicePoint" signature="static System.Net.ServicePoint FindServicePoint(System.Uri address)">
			<missing/>
		</method>
		<method name="FindServicePoint" signature="static System.Net.ServicePoint FindServicePoint(System.String uriString, System.Net.IWebProxy proxy)">
			<missing/>
		</method>
		<method name="FindServicePoint" signature="static System.Net.ServicePoint FindServicePoint(System.Uri address, System.Net.IWebProxy proxy)">
			<missing/>
		</method>
		<field name="DefaultNonPersistentConnectionLimit" type="System.Int32">
			<missing/>
		</field>
		<field name="DefaultPersistentConnectionLimit" type="System.Int32">
			<missing/>
		</field>
		<property name="DefaultConnectionLimit" type="System.Int32">
			<missing/>
		</property>
		<property name="MaxServicePointIdleTime" type="System.Int32">
			<missing/>
		</property>
		<property name="MaxServicePoints" type="System.Int32">
			<missing/>
		</property>
	</class>
	<class name="System.Net.SocketAddress" assembly="System">
		<missing/>
		<ctor signature="System.Net.SocketAddress(System.Net.Sockets.AddressFamily family)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.SocketAddress(System.Net.Sockets.AddressFamily family, System.Int32 size)">
			<missing/>
		</ctor>
		<method name="Equals" signature="System.Boolean Equals(System.Object comparand)">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="ToString" signature="System.String ToString()">
			<missing/>
		</method>
		<property name="Family" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</property>
		<property name="Item" type="System.Byte">
			<missing/>
		</property>
		<property name="Size" type="System.Int32">
			<missing/>
		</property>
	</class>
	<class name="System.Net.SocketPermission" assembly="System">
		<missing/>
		<ctor signature="System.Net.SocketPermission(System.Security.Permissions.PermissionState state)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.SocketPermission(System.Net.NetworkAccess access, System.Net.TransportType transport, System.String hostName, System.Int32 portNumber)">
			<missing/>
		</ctor>
		<method name="Copy" signature="System.Security.IPermission Copy()">
			<missing/>
		</method>
		<method name="FromXml" signature="System.Void FromXml(System.Security.SecurityElement securityElement)">
			<missing/>
		</method>
		<method name="Intersect" signature="System.Security.IPermission Intersect(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="ToXml" signature="System.Security.SecurityElement ToXml()">
			<missing/>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission target)">
			<missing/>
		</method>
		<field name="AllPorts" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.SocketPermissionAttribute" assembly="System">
		<missing/>
		<ctor signature="System.Net.SocketPermissionAttribute(System.Security.Permissions.SecurityAction action)">
			<missing/>
		</ctor>
		<method name="CreatePermission" signature="System.Security.IPermission CreatePermission()">
			<missing/>
		</method>
		<property name="Access" type="System.String">
			<missing/>
		</property>
		<property name="Host" type="System.String">
			<missing/>
		</property>
		<property name="Port" type="System.String">
			<missing/>
		</property>
		<property name="Transport" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Net.TransportType" assembly="System">
		<missing/>
		<field name="All" type="System.Net.TransportType">
			<missing/>
		</field>
		<field name="ConnectionOriented" type="System.Net.TransportType">
			<missing/>
		</field>
		<field name="Connectionless" type="System.Net.TransportType">
			<missing/>
		</field>
		<field name="Tcp" type="System.Net.TransportType">
			<missing/>
		</field>
		<field name="Udp" type="System.Net.TransportType">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.WebClient" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebClient()">
			<missing/>
		</ctor>
		<method name="DownloadData" signature="System.Byte[] DownloadData(System.String address)">
			<missing/>
		</method>
		<method name="DownloadFile" signature="System.Void DownloadFile(System.String address, System.String fileName)">
			<missing/>
		</method>
		<method name="OpenRead" signature="System.IO.Stream OpenRead(System.String address)">
			<missing/>
		</method>
		<method name="OpenWrite" signature="System.IO.Stream OpenWrite(System.String address)">
			<missing/>
		</method>
		<method name="OpenWrite" signature="System.IO.Stream OpenWrite(System.String address, System.String method)">
			<missing/>
		</method>
		<method name="UploadData" signature="System.Byte[] UploadData(System.String address, System.Byte[] data)">
			<missing/>
		</method>
		<method name="UploadData" signature="System.Byte[] UploadData(System.String address, System.String method, System.Byte[] data)">
			<missing/>
		</method>
		<method name="UploadFile" signature="System.Byte[] UploadFile(System.String address, System.String fileName)">
			<missing/>
		</method>
		<method name="UploadFile" signature="System.Byte[] UploadFile(System.String address, System.String method, System.String fileName)">
			<missing/>
		</method>
		<method name="UploadValues" signature="System.Byte[] UploadValues(System.String address, System.Collections.Specialized.NameValueCollection data)">
			<missing/>
		</method>
		<method name="UploadValues" signature="System.Byte[] UploadValues(System.String address, System.String method, System.Collections.Specialized.NameValueCollection data)">
			<missing/>
		</method>
		<property name="BaseAddress" type="System.String">
			<missing/>
		</property>
		<property name="Credentials" type="System.Net.ICredentials">
			<missing/>
		</property>
		<property name="Headers" type="System.Net.WebHeaderCollection">
			<missing/>
		</property>
		<property name="QueryString" type="System.Collections.Specialized.NameValueCollection">
			<missing/>
		</property>
		<property name="ResponseHeaders" type="System.Net.WebHeaderCollection">
			<missing/>
		</property>
	</class>
	<class name="System.Net.WebException" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebException()">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebException(System.String message)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebException(System.String message, System.Exception innerException)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebException(System.String message, System.Net.WebExceptionStatus status)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebException(System.String message, System.Exception innerException, System.Net.WebExceptionStatus status, System.Net.WebResponse response)">
			<missing/>
		</ctor>
		<property name="Response" type="System.Net.WebResponse">
			<missing/>
		</property>
		<property name="Status" type="System.Net.WebExceptionStatus">
			<missing/>
		</property>
	</class>
	<class name="System.Net.WebExceptionStatus" assembly="System">
		<missing/>
		<field name="ConnectFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="ConnectionClosed" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="KeepAliveFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="NameResolutionFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="Pending" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="PipelineFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="ProtocolError" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="ProxyNameResolutionFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="ReceiveFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="RequestCanceled" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="SecureChannelFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="SendFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="ServerProtocolViolation" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="Success" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="Timeout" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="TrustFailure" type="System.Net.WebExceptionStatus">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.WebHeaderCollection" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebHeaderCollection()">
			<missing/>
		</ctor>
		<method name="Add" signature="System.Void Add(System.String name, System.String value)">
			<missing/>
		</method>
		<method name="Add" signature="System.Void Add(System.String header)">
			<missing/>
		</method>
		<method name="AddWithoutValidate" signature="System.Void AddWithoutValidate(System.String headerName, System.String headerValue)">
			<missing/>
		</method>
		<method name="GetValues" signature="System.String[] GetValues(System.String header)">
			<missing/>
		</method>
		<method name="IsRestricted" signature="static System.Boolean IsRestricted(System.String headerName)">
			<missing/>
		</method>
		<method name="Remove" signature="System.Void Remove(System.String name)">
			<missing/>
		</method>
		<method name="Set" signature="System.Void Set(System.String name, System.String value)">
			<missing/>
		</method>
	</class>
	<class name="System.Net.WebPermission" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebPermission(System.Security.Permissions.PermissionState state)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebPermission(System.Net.NetworkAccess access, System.String uriString)">
			<missing/>
		</ctor>
		<method name="Copy" signature="System.Security.IPermission Copy()">
			<missing/>
		</method>
		<method name="FromXml" signature="System.Void FromXml(System.Security.SecurityElement securityElement)">
			<missing/>
		</method>
		<method name="Intersect" signature="System.Security.IPermission Intersect(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="ToXml" signature="System.Security.SecurityElement ToXml()">
			<missing/>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission target)">
			<missing/>
		</method>
	</class>
	<class name="System.Net.WebPermissionAttribute" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebPermissionAttribute(System.Security.Permissions.SecurityAction action)">
			<missing/>
		</ctor>
		<method name="CreatePermission" signature="System.Security.IPermission CreatePermission()">
			<missing/>
		</method>
		<property name="Accept" type="System.String">
			<missing/>
		</property>
		<property name="Connect" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Net.WebProxy" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebProxy()">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.Uri Address)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.Uri Address, System.Boolean BypassOnLocal)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.Uri Address, System.Boolean BypassOnLocal, System.String[] BypassList)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.Uri Address, System.Boolean BypassOnLocal, System.String[] BypassList, System.Net.ICredentials Credentials)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.String Host, System.Int32 Port)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.String Address)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.String Address, System.Boolean BypassOnLocal)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.String Address, System.Boolean BypassOnLocal, System.String[] BypassList)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.WebProxy(System.String Address, System.Boolean BypassOnLocal, System.String[] BypassList, System.Net.ICredentials Credentials)">
			<missing/>
		</ctor>
		<method name="GetDefaultProxy" signature="static System.Net.WebProxy GetDefaultProxy()">
			<missing/>
		</method>
		<method name="GetProxy" signature="System.Uri GetProxy(System.Uri destination)">
			<missing/>
		</method>
		<method name="IsBypassed" signature="System.Boolean IsBypassed(System.Uri host)">
			<missing/>
		</method>
		<property name="Address" type="System.Uri">
			<missing/>
		</property>
		<property name="BypassArrayList" type="System.Collections.ArrayList">
			<missing/>
		</property>
		<property name="BypassList" type="System.String[]">
			<missing/>
		</property>
		<property name="BypassProxyOnLocal" type="System.Boolean">
			<missing/>
		</property>
		<property name="Credentials" type="System.Net.ICredentials">
			<missing/>
		</property>
	</class>
	<class name="System.Net.WebRequest" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebRequest()">
			<missing/>
		</ctor>
		<method name="Abort" signature="System.Void Abort()">
			<missing/>
		</method>
		<method name="BeginGetRequestStream" signature="System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginGetResponse" signature="System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="Create" signature="static System.Net.WebRequest Create(System.String requestUriString)">
			<missing/>
		</method>
		<method name="Create" signature="static System.Net.WebRequest Create(System.Uri requestUri)">
			<missing/>
		</method>
		<method name="CreateDefault" signature="static System.Net.WebRequest CreateDefault(System.Uri requestUri)">
			<missing/>
		</method>
		<method name="EndGetRequestStream" signature="System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndGetResponse" signature="System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="GetRequestStream" signature="System.IO.Stream GetRequestStream()">
			<missing/>
		</method>
		<method name="GetResponse" signature="System.Net.WebResponse GetResponse()">
			<missing/>
		</method>
		<method name="RegisterPrefix" signature="static System.Boolean RegisterPrefix(System.String prefix, System.Net.IWebRequestCreate creator)">
			<missing/>
		</method>
		<property name="ConnectionGroupName" type="System.String">
			<missing/>
		</property>
		<property name="ContentLength" type="System.Int64">
			<missing/>
		</property>
		<property name="ContentType" type="System.String">
			<missing/>
		</property>
		<property name="Credentials" type="System.Net.ICredentials">
			<missing/>
		</property>
		<property name="Headers" type="System.Net.WebHeaderCollection">
			<missing/>
		</property>
		<property name="Method" type="System.String">
			<missing/>
		</property>
		<property name="PreAuthenticate" type="System.Boolean">
			<missing/>
		</property>
		<property name="Proxy" type="System.Net.IWebProxy">
			<missing/>
		</property>
		<property name="RequestUri" type="System.Uri">
			<missing/>
		</property>
		<property name="Timeout" type="System.Int32">
			<missing/>
		</property>
	</class>
	<class name="System.Net.WebResponse" assembly="System">
		<missing/>
		<ctor signature="System.Net.WebResponse()">
			<missing/>
		</ctor>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="GetResponseStream" signature="System.IO.Stream GetResponseStream()">
			<missing/>
		</method>
		<method name="System.IDisposable.Dispose" signature="System.Void System.IDisposable.Dispose()">
			<missing/>
		</method>
		<property name="ContentLength" type="System.Int64">
			<missing/>
		</property>
		<property name="ContentType" type="System.String">
			<missing/>
		</property>
		<property name="Headers" type="System.Net.WebHeaderCollection">
			<missing/>
		</property>
		<property name="ResponseUri" type="System.Uri">
			<missing/>
		</property>
	</class>
	<class name="System.Net.Sockets.AddressFamily" assembly="System">
		<missing/>
		<field name="AppleTalk" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Atm" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Banyan" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Ccitt" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Chaos" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Cluster" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="DataKit" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="DataLink" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="DecNet" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Ecma" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="FireFox" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="HyperChannel" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Ieee12844" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="ImpLink" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="InterNetwork" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="InterNetworkV6" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Ipx" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Irda" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Iso" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Lat" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="NS" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="NetBios" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="NetworkDesigners" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Osi" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Pup" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Sna" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Unix" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Unknown" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="Unspecified" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="VoiceView" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.Sockets.LingerOption" assembly="System">
		<missing/>
		<ctor signature="System.Net.Sockets.LingerOption(System.Boolean enable, System.Int32 seconds)">
			<missing/>
		</ctor>
		<property name="Enabled" type="System.Boolean">
			<missing/>
		</property>
		<property name="LingerTime" type="System.Int32">
			<missing/>
		</property>
	</class>
	<class name="System.Net.Sockets.MulticastOption" assembly="System">
		<missing/>
		<ctor signature="System.Net.Sockets.MulticastOption(System.Net.IPAddress group, System.Net.IPAddress mcint)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.Sockets.MulticastOption(System.Net.IPAddress group)">
			<missing/>
		</ctor>
		<property name="Group" type="System.Net.IPAddress">
			<missing/>
		</property>
		<property name="LocalAddress" type="System.Net.IPAddress">
			<missing/>
		</property>
	</class>
	<class name="System.Net.Sockets.NetworkStream" assembly="System">
		<missing/>
		<ctor signature="System.Net.Sockets.NetworkStream(System.Net.Sockets.Socket socket)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.Sockets.NetworkStream(System.Net.Sockets.Socket socket, System.Boolean ownsSocket)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.Sockets.NetworkStream(System.Net.Sockets.Socket socket, System.IO.FileAccess access)">
			<missing/>
		</ctor>
		<ctor signature="System.Net.Sockets.NetworkStream(System.Net.Sockets.Socket socket, System.IO.FileAccess access, System.Boolean ownsSocket)">
			<missing/>
		</ctor>
		<method name="BeginRead" signature="System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginWrite" signature="System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="Dispose" signature="System.Void Dispose(System.Boolean disposing)">
			<missing/>
		</method>
		<method name="EndRead" signature="System.Int32 EndRead(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndWrite" signature="System.Void EndWrite(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="Finalize" signature="System.Void Finalize()">
			<missing/>
		</method>
		<method name="Flush" signature="System.Void Flush()">
			<missing/>
		</method>
		<method name="Read" signature="System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)">
			<missing/>
		</method>
		<method name="Seek" signature="System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)">
			<missing/>
		</method>
		<method name="SetLength" signature="System.Void SetLength(System.Int64 value)">
			<missing/>
		</method>
		<method name="Write" signature="System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)">
			<missing/>
		</method>
		<property name="CanRead" type="System.Boolean">
			<missing/>
		</property>
		<property name="CanSeek" type="System.Boolean">
			<missing/>
		</property>
		<property name="CanWrite" type="System.Boolean">
			<missing/>
		</property>
		<property name="DataAvailable" type="System.Boolean">
			<missing/>
		</property>
		<property name="Length" type="System.Int64">
			<missing/>
		</property>
		<property name="Position" type="System.Int64">
			<missing/>
		</property>
	</class>
	<class name="System.Net.Sockets.ProtocolType" assembly="System">
		<missing/>
		<field name="Ggp" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="IP" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Icmp" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Idp" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Igmp" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Ipx" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="ND" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Pup" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Raw" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Spx" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="SpxII" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Tcp" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Udp" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Unknown" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="Unspecified" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.Sockets.SelectMode" assembly="System">
		<missing/>
		<field name="SelectError" type="System.Net.Sockets.SelectMode">
			<missing/>
		</field>
		<field name="SelectRead" type="System.Net.Sockets.SelectMode">
			<missing/>
		</field>
		<field name="SelectWrite" type="System.Net.Sockets.SelectMode">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.Sockets.Socket" assembly="System">
		<missing/>
		<ctor signature="System.Net.Sockets.Socket(System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType)">
			<missing/>
		</ctor>
		<method name="Accept" signature="System.Net.Sockets.Socket Accept()">
			<missing/>
		</method>
		<method name="BeginAccept" signature="System.IAsyncResult BeginAccept(System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginConnect" signature="System.IAsyncResult BeginConnect(System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginReceive" signature="System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginReceiveFrom" signature="System.IAsyncResult BeginReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint&amp; remoteEP, System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginSend" signature="System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="BeginSendTo" signature="System.IAsyncResult BeginSendTo(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)">
			<missing/>
		</method>
		<method name="Bind" signature="System.Void Bind(System.Net.EndPoint localEP)">
			<missing/>
		</method>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="Connect" signature="System.Void Connect(System.Net.EndPoint remoteEP)">
			<missing/>
		</method>
		<method name="Dispose" signature="System.Void Dispose(System.Boolean disposing)">
			<missing/>
		</method>
		<method name="EndAccept" signature="System.Net.Sockets.Socket EndAccept(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndConnect" signature="System.Void EndConnect(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndReceive" signature="System.Int32 EndReceive(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndReceiveFrom" signature="System.Int32 EndReceiveFrom(System.IAsyncResult asyncResult, System.Net.EndPoint&amp; endPoint)">
			<missing/>
		</method>
		<method name="EndSend" signature="System.Int32 EndSend(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="EndSendTo" signature="System.Int32 EndSendTo(System.IAsyncResult asyncResult)">
			<missing/>
		</method>
		<method name="Finalize" signature="System.Void Finalize()">
			<missing/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="GetSocketOption" signature="System.Object GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName)">
			<missing/>
		</method>
		<method name="GetSocketOption" signature="System.Void GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Byte[] optionValue)">
			<missing/>
		</method>
		<method name="GetSocketOption" signature="System.Byte[] GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionLength)">
			<missing/>
		</method>
		<method name="IOControl" signature="System.Int32 IOControl(System.Int32 ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)">
			<missing/>
		</method>
		<method name="Listen" signature="System.Void Listen(System.Int32 backlog)">
			<missing/>
		</method>
		<method name="Poll" signature="System.Boolean Poll(System.Int32 microSeconds, System.Net.Sockets.SelectMode mode)">
			<missing/>
		</method>
		<method name="Receive" signature="System.Int32 Receive(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)">
			<missing/>
		</method>
		<method name="Receive" signature="System.Int32 Receive(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags)">
			<missing/>
		</method>
		<method name="Receive" signature="System.Int32 Receive(System.Byte[] buffer)">
			<missing/>
		</method>
		<method name="Receive" signature="System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)">
			<missing/>
		</method>
		<method name="ReceiveFrom" signature="System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint&amp; remoteEP)">
			<missing/>
		</method>
		<method name="ReceiveFrom" signature="System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint&amp; remoteEP)">
			<missing/>
		</method>
		<method name="ReceiveFrom" signature="System.Int32 ReceiveFrom(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint&amp; remoteEP)">
			<missing/>
		</method>
		<method name="ReceiveFrom" signature="System.Int32 ReceiveFrom(System.Byte[] buffer, System.Net.EndPoint&amp; remoteEP)">
			<missing/>
		</method>
		<method name="Select" signature="static System.Void Select(System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, System.Int32 microSeconds)">
			<missing/>
		</method>
		<method name="Send" signature="System.Int32 Send(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)">
			<missing/>
		</method>
		<method name="Send" signature="System.Int32 Send(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags)">
			<missing/>
		</method>
		<method name="Send" signature="System.Int32 Send(System.Byte[] buffer)">
			<missing/>
		</method>
		<method name="Send" signature="System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)">
			<missing/>
		</method>
		<method name="SendTo" signature="System.Int32 SendTo(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)">
			<missing/>
		</method>
		<method name="SendTo" signature="System.Int32 SendTo(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)">
			<missing/>
		</method>
		<method name="SendTo" signature="System.Int32 SendTo(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)">
			<missing/>
		</method>
		<method name="SendTo" signature="System.Int32 SendTo(System.Byte[] buffer, System.Net.EndPoint remoteEP)">
			<missing/>
		</method>
		<method name="SetSocketOption" signature="System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue)">
			<missing/>
		</method>
		<method name="SetSocketOption" signature="System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Byte[] optionValue)">
			<missing/>
		</method>
		<method name="SetSocketOption" signature="System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Object optionValue)">
			<missing/>
		</method>
		<method name="Shutdown" signature="System.Void Shutdown(System.Net.Sockets.SocketShutdown how)">
			<missing/>
		</method>
		<method name="System.IDisposable.Dispose" signature="System.Void System.IDisposable.Dispose()">
			<missing/>
		</method>
		<property name="AddressFamily" type="System.Net.Sockets.AddressFamily">
			<missing/>
		</property>
		<property name="Available" type="System.Int32">
			<missing/>
		</property>
		<property name="Blocking" type="System.Boolean">
			<missing/>
		</property>
		<property name="Connected" type="System.Boolean">
			<missing/>
		</property>
		<property name="Handle" type="System.IntPtr">
			<missing/>
		</property>
		<property name="LocalEndPoint" type="System.Net.EndPoint">
			<missing/>
		</property>
		<property name="ProtocolType" type="System.Net.Sockets.ProtocolType">
			<missing/>
		</property>
		<property name="RemoteEndPoint" type="System.Net.EndPoint">
			<missing/>
		</property>
		<property name="SocketType" type="System.Net.Sockets.SocketType">
			<missing/>
		</property>
	</class>
	<class name="System.Net.Sockets.SocketException" assembly="System">
		<missing/>
		<ctor signature="System.Net.Sockets.SocketException()">
			<missing/>
		</ctor>
	</class>
	<class name="System.Net.Sockets.SocketFlags" assembly="System">
		<missing/>
		<field name="DontRoute" type="System.Net.Sockets.SocketFlags">
			<missing/>
		</field>
		<field name="None" type="System.Net.Sockets.SocketFlags">
			<missing/>
		</field>
		<field name="OutOfBand" type="System.Net.Sockets.SocketFlags">
			<missing/>
		</field>
		<field name="Partial" type="System.Net.Sockets.SocketFlags">
			<missing/>
		</field>
		<field name="Peek" type="System.Net.Sockets.SocketFlags">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.Sockets.SocketOptionLevel" assembly="System">
		<missing/>
		<field name="IP" type="System.Net.Sockets.SocketOptionLevel">
			<missing/>
		</field>
		<field name="Socket" type="System.Net.Sockets.SocketOptionLevel">
			<missing/>
		</field>
		<field name="Tcp" type="System.Net.Sockets.SocketOptionLevel">
			<missing/>
		</field>
		<field name="Udp" type="System.Net.Sockets.SocketOptionLevel">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.Sockets.SocketOptionName" assembly="System">
		<missing/>
		<field name="AcceptConnection" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="AddMembership" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="AddSourceMembership" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="BlockSource" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="Broadcast" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="BsdUrgent" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="ChecksumCoverage" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="Debug" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="DontFragment" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="DontLinger" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="DontRoute" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="DropMembership" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="DropSourceMembership" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="Error" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="ExclusiveAddressUse" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="Expedited" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="HeaderIncluded" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="IPOptions" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="IpTimeToLive" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="KeepAlive" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="Linger" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="MaxConnections" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="MulticastInterface" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="MulticastLoopback" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="MulticastTimeToLive" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="NoChecksum" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="NoDelay" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="OutOfBandInline" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="PacketInformation" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="ReceiveBuffer" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="ReceiveLowWater" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="ReceiveTimeout" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="ReuseAddress" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="SendBuffer" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="SendLowWater" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="SendTimeout" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="Type" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="TypeOfService" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="UnblockSource" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="UseLoopback" type="System.Net.Sockets.SocketOptionName">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.Sockets.SocketShutdown" assembly="System">
		<missing/>
		<field name="Both" type="System.Net.Sockets.SocketShutdown">
			<missing/>
		</field>
		<field name="Receive" type="System.Net.Sockets.SocketShutdown">
			<missing/>
		</field>
		<field name="Send" type="System.Net.Sockets.SocketShutdown">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Net.Sockets.SocketType" assembly="System">
		<missing/>
		<field name="Dgram" type="System.Net.Sockets.SocketType">
			<missing/>
		</field>
		<field name="Raw" type="System.Net.Sockets.SocketType">
			<missing/>
		</field>
		<field name="Rdm" type="System.Net.Sockets.SocketType">
			<missing/>
		</field>
		<field name="Seqpacket" type="System.Net.Sockets.SocketType">
			<missing/>
		</field>
		<field name="Stream" type="System.Net.Sockets.SocketType">
			<missing/>
		</field>
		<field name="Unknown" type="System.Net.Sockets.SocketType">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Reflection.DefaultMemberAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, AllowMultiple=false, Inherited=true)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Reflection.ParameterModifier" assembly="mscorlib">
		<attribute name="DefaultMemberAttribute(&quot;Item&quot;)">
			<extra/>
		</attribute>
	</class>
	<class name="System.Runtime.CompilerServices.DecimalConstantAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Runtime.CompilerServices.MethodImplAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Constructor | AttributeTargets.Method, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Runtime.InteropServices.DllImportAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Method, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Runtime.InteropServices.FieldOffsetAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Field, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Runtime.InteropServices.InAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Parameter, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Runtime.InteropServices.MarshalAsAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Runtime.InteropServices.OutAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Parameter, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Runtime.InteropServices.StructLayoutAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple=false, Inherited=false)">
			<missing/>
		</attribute>
	</class>
	<class name="System.Security.CodeAccessPermission" assembly="mscorlib">
		<method name="Assert" signature="System.Void Assert()">
			<msg>should have attributes `public final virtual hidebysig &apos;, but has `public hidebysig &apos; instead</msg>
		</method>
		<method name="Deny" signature="System.Void Deny()">
			<msg>should have attributes `public final virtual hidebysig &apos;, but has `public hidebysig &apos; instead</msg>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission other)">
			<todo/>
		</method>
	</class>
	<class name="System.Security.PermissionSet" assembly="mscorlib">
		<method name="FromXml" signature="System.Void FromXml(System.Security.SecurityElement et)">
			<todo/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.PermissionSet target)">
			<todo/>
		</method>
		<method name="ToXml" signature="System.Security.SecurityElement ToXml()">
			<todo/>
		</method>
		<method name="Union" signature="System.Security.PermissionSet Union(System.Security.PermissionSet other)">
			<todo/>
		</method>
		<property name="Count" type="System.Int32">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="IsSynchronized" type="System.Boolean">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
		<property name="SyncRoot" type="System.Object">
			<msg>should have attributes `public virtual hidebysig abstract specialname &apos;, but has `public virtual hidebysig specialname &apos; instead</msg>
		</property>
	</class>
	<class name="System.Security.Permissions.CodeAccessSecurityAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method, AllowMultiple=true, Inherited=false)">
			<missing/>
		</attribute>
		<ctor signature="System.Security.Permissions.CodeAccessSecurityAttribute()">
			<missing/>
		</ctor>
	</class>
	<class name="System.Security.Permissions.EnvironmentPermission" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Security.Permissions.EnvironmentPermission(System.Security.Permissions.PermissionState state)">
			<missing/>
		</ctor>
		<ctor signature="System.Security.Permissions.EnvironmentPermission(System.Security.Permissions.EnvironmentPermissionAccess flag, System.String pathList)">
			<missing/>
		</ctor>
		<method name="Copy" signature="System.Security.IPermission Copy()">
			<missing/>
		</method>
		<method name="FromXml" signature="System.Void FromXml(System.Security.SecurityElement esd)">
			<missing/>
		</method>
		<method name="Intersect" signature="System.Security.IPermission Intersect(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="ToXml" signature="System.Security.SecurityElement ToXml()">
			<missing/>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission other)">
			<missing/>
		</method>
	</class>
	<class name="System.Security.Permissions.EnvironmentPermissionAccess" assembly="mscorlib">
		<missing/>
		<field name="AllAccess" type="System.Security.Permissions.EnvironmentPermissionAccess">
			<missing/>
		</field>
		<field name="NoAccess" type="System.Security.Permissions.EnvironmentPermissionAccess">
			<missing/>
		</field>
		<field name="Read" type="System.Security.Permissions.EnvironmentPermissionAccess">
			<missing/>
		</field>
		<field name="Write" type="System.Security.Permissions.EnvironmentPermissionAccess">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Security.Permissions.EnvironmentPermissionAttribute" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Security.Permissions.EnvironmentPermissionAttribute(System.Security.Permissions.SecurityAction action)">
			<missing/>
		</ctor>
		<method name="CreatePermission" signature="System.Security.IPermission CreatePermission()">
			<missing/>
		</method>
		<property name="All" type="System.Void">
			<missing/>
		</property>
		<property name="Read" type="System.String">
			<missing/>
		</property>
		<property name="Write" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Security.Permissions.FileIOPermission" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Security.Permissions.FileIOPermission(System.Security.Permissions.PermissionState state)">
			<missing/>
		</ctor>
		<ctor signature="System.Security.Permissions.FileIOPermission(System.Security.Permissions.FileIOPermissionAccess access, System.String path)">
			<missing/>
		</ctor>
		<method name="Copy" signature="System.Security.IPermission Copy()">
			<missing/>
		</method>
		<method name="FromXml" signature="System.Void FromXml(System.Security.SecurityElement esd)">
			<missing/>
		</method>
		<method name="Intersect" signature="System.Security.IPermission Intersect(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="ToXml" signature="System.Security.SecurityElement ToXml()">
			<missing/>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission other)">
			<missing/>
		</method>
	</class>
	<class name="System.Security.Permissions.FileIOPermissionAccess" assembly="mscorlib">
		<missing/>
		<field name="AllAccess" type="System.Security.Permissions.FileIOPermissionAccess">
			<missing/>
		</field>
		<field name="Append" type="System.Security.Permissions.FileIOPermissionAccess">
			<missing/>
		</field>
		<field name="NoAccess" type="System.Security.Permissions.FileIOPermissionAccess">
			<missing/>
		</field>
		<field name="PathDiscovery" type="System.Security.Permissions.FileIOPermissionAccess">
			<missing/>
		</field>
		<field name="Read" type="System.Security.Permissions.FileIOPermissionAccess">
			<missing/>
		</field>
		<field name="Write" type="System.Security.Permissions.FileIOPermissionAccess">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Security.Permissions.FileIOPermissionAttribute" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Security.Permissions.FileIOPermissionAttribute(System.Security.Permissions.SecurityAction action)">
			<missing/>
		</ctor>
		<method name="CreatePermission" signature="System.Security.IPermission CreatePermission()">
			<missing/>
		</method>
		<property name="All" type="System.Void">
			<missing/>
		</property>
		<property name="Append" type="System.String">
			<missing/>
		</property>
		<property name="PathDiscovery" type="System.String">
			<missing/>
		</property>
		<property name="Read" type="System.String">
			<missing/>
		</property>
		<property name="Write" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Security.Permissions.ReflectionPermission" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Security.Permissions.ReflectionPermission(System.Security.Permissions.ReflectionPermissionFlag flag)">
			<missing/>
		</ctor>
		<method name="Copy" signature="System.Security.IPermission Copy()">
			<missing/>
		</method>
		<method name="FromXml" signature="System.Void FromXml(System.Security.SecurityElement esd)">
			<missing/>
		</method>
		<method name="Intersect" signature="System.Security.IPermission Intersect(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.IPermission target)">
			<missing/>
		</method>
		<method name="ToXml" signature="System.Security.SecurityElement ToXml()">
			<missing/>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission other)">
			<missing/>
		</method>
	</class>
	<class name="System.Security.Permissions.ReflectionPermissionAttribute" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Security.Permissions.ReflectionPermissionAttribute(System.Security.Permissions.SecurityAction action)">
			<missing/>
		</ctor>
		<method name="CreatePermission" signature="System.Security.IPermission CreatePermission()">
			<missing/>
		</method>
		<property name="Flags" type="System.Security.Permissions.ReflectionPermissionFlag">
			<missing/>
		</property>
	</class>
	<class name="System.Security.Permissions.ReflectionPermissionFlag" assembly="mscorlib">
		<missing/>
		<field name="MemberAccess" type="System.Security.Permissions.ReflectionPermissionFlag">
			<missing/>
		</field>
		<field name="NoFlags" type="System.Security.Permissions.ReflectionPermissionFlag">
			<missing/>
		</field>
		<field name="TypeInformation" type="System.Security.Permissions.ReflectionPermissionFlag">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Security.Permissions.SecurityAction" assembly="mscorlib">
		<field name="InheritanceDemand" type="System.Security.Permissions.SecurityAction">
			<missing/>
		</field>
	</class>
	<class name="System.Security.Permissions.SecurityAttribute" assembly="mscorlib">
		<attribute name="AttributeUsageAttribute(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method, AllowMultiple=true, Inherited=false)">
			<missing/>
		</attribute>
		<ctor signature="System.Security.Permissions.SecurityAttribute()">
			<missing/>
		</ctor>
	</class>
	<class name="System.Security.Permissions.SecurityPermission" assembly="mscorlib">
		<method name="Intersect" signature="System.Security.IPermission Intersect(System.Security.IPermission target)">
			<todo/>
		</method>
		<method name="IsSubsetOf" signature="System.Boolean IsSubsetOf(System.Security.IPermission target)">
			<todo/>
		</method>
		<method name="Union" signature="System.Security.IPermission Union(System.Security.IPermission target)">
			<todo/>
		</method>
	</class>
	<class name="System.Security.Permissions.SecurityPermissionAttribute" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction action)">
			<missing/>
		</ctor>
		<method name="CreatePermission" signature="System.Security.IPermission CreatePermission()">
			<missing/>
		</method>
		<property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag">
			<missing/>
		</property>
	</class>
	<class name="System.Text.UTF8Encoding" assembly="mscorlib">
		<ctor signature="System.Text.UTF8Encoding(System.Boolean encoderShouldEmitUTF8Identifier, System.Boolean throwOnInvalidBytes)">
			<todo/>
		</ctor>
		<method name="Equals" signature="System.Boolean Equals(System.Object value)">
			<missing/>
		</method>
		<method name="GetByteCount" signature="System.Int32 GetByteCount(System.Char[] chars, System.Int32 index, System.Int32 count)">
			<todo/>
		</method>
		<method name="GetByteCount" signature="System.Int32 GetByteCount(System.String chars)">
			<todo/>
		</method>
		<method name="GetBytes" signature="System.Int32 GetBytes(System.String s, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)">
			<todo/>
		</method>
		<method name="GetBytes" signature="System.Byte[] GetBytes(System.String s)">
			<missing/>
		</method>
		<method name="GetBytes" signature="System.Int32 GetBytes(System.Char[] chars, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)">
			<todo/>
		</method>
		<method name="GetCharCount" signature="System.Int32 GetCharCount(System.Byte[] bytes, System.Int32 index, System.Int32 count)">
			<todo/>
		</method>
		<method name="GetChars" signature="System.Int32 GetChars(System.Byte[] bytes, System.Int32 byteIndex, System.Int32 byteCount, System.Char[] chars, System.Int32 charIndex)">
			<todo/>
		</method>
		<method name="GetDecoder" signature="System.Text.Decoder GetDecoder()">
			<todo/>
		</method>
		<method name="GetEncoder" signature="System.Text.Encoder GetEncoder()">
			<todo/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
		<method name="GetMaxByteCount" signature="System.Int32 GetMaxByteCount(System.Int32 charCount)">
			<todo/>
		</method>
		<method name="GetMaxCharCount" signature="System.Int32 GetMaxCharCount(System.Int32 byteCount)">
			<todo/>
		</method>
		<method name="GetPreamble" signature="System.Byte[] GetPreamble()">
			<todo/>
		</method>
	</class>
	<class name="System.Text.UnicodeEncoding" assembly="mscorlib">
		<method name="Equals" signature="System.Boolean Equals(System.Object value)">
			<missing/>
		</method>
		<method name="GetBytes" signature="System.Int32 GetBytes(System.String s, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)">
			<todo/>
		</method>
		<method name="GetBytes" signature="System.Byte[] GetBytes(System.String s)">
			<missing/>
		</method>
		<method name="GetBytes" signature="System.Int32 GetBytes(System.Char[] chars, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)">
			<todo/>
		</method>
		<method name="GetChars" signature="System.Int32 GetChars(System.Byte[] bytes, System.Int32 byteIndex, System.Int32 byteCount, System.Char[] chars, System.Int32 charIndex)">
			<todo/>
		</method>
		<method name="GetDecoder" signature="System.Text.Decoder GetDecoder()">
			<todo/>
		</method>
		<method name="GetHashCode" signature="System.Int32 GetHashCode()">
			<missing/>
		</method>
	</class>
	<class name="System.Threading.Thread" assembly="mscorlib">
		<method name="GetDomain" signature="static System.AppDomain GetDomain()">
			<todo/>
		</method>
		<method name="MemoryBarrier " signature="static System.Void MemoryBarrier ()">
			<missing/>
		</method>
	</class>
	<class name="System.Threading.Timer" assembly="mscorlib">
		<missing/>
		<ctor signature="System.Threading.Timer(System.Threading.TimerCallback callback, System.Object state, System.Int32 dueTime, System.Int32 period)">
			<missing/>
		</ctor>
		<ctor signature="System.Threading.Timer(System.Threading.TimerCallback callback, System.Object state, System.TimeSpan dueTime, System.TimeSpan period)">
			<missing/>
		</ctor>
		<method name="Change" signature="System.Boolean Change(System.Int32 dueTime, System.Int32 period)">
			<missing/>
		</method>
		<method name="Change" signature="System.Boolean Change(System.TimeSpan dueTime, System.TimeSpan period)">
			<missing/>
		</method>
		<method name="Dispose" signature="System.Void Dispose()">
			<missing/>
		</method>
		<method name="Dispose" signature="System.Boolean Dispose(System.Threading.WaitHandle notifyObject)">
			<missing/>
		</method>
		<method name="Finalize" signature="System.Void Finalize()">
			<missing/>
		</method>
	</class>
	<class name="System.Threading.TimerCallback" assembly="mscorlib">
		<missing/>
	</class>
	<class name="System.Xml.Formatting" assembly="System.Xml">
		<missing/>
		<field name="Indented" type="System.Xml.Formatting">
			<missing/>
		</field>
		<field name="None" type="System.Xml.Formatting">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Xml.NameTable" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.NameTable()">
			<missing/>
		</ctor>
		<method name="Add" signature="System.String Add(System.String key)">
			<missing/>
		</method>
		<method name="Add" signature="System.String Add(System.Char[] key, System.Int32 start, System.Int32 len)">
			<missing/>
		</method>
		<method name="Get" signature="System.String Get(System.String value)">
			<missing/>
		</method>
		<method name="Get" signature="System.String Get(System.Char[] key, System.Int32 start, System.Int32 len)">
			<missing/>
		</method>
	</class>
	<class name="System.Xml.ReadState" assembly="System.Xml">
		<missing/>
		<field name="Closed" type="System.Xml.ReadState">
			<missing/>
		</field>
		<field name="EndOfFile" type="System.Xml.ReadState">
			<missing/>
		</field>
		<field name="Error" type="System.Xml.ReadState">
			<missing/>
		</field>
		<field name="Initial" type="System.Xml.ReadState">
			<missing/>
		</field>
		<field name="Interactive" type="System.Xml.ReadState">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Xml.WhitespaceHandling" assembly="System.Xml">
		<missing/>
		<field name="All" type="System.Xml.WhitespaceHandling">
			<missing/>
		</field>
		<field name="None" type="System.Xml.WhitespaceHandling">
			<missing/>
		</field>
		<field name="Significant" type="System.Xml.WhitespaceHandling">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Xml.WriteState" assembly="System.Xml">
		<missing/>
		<field name="Attribute" type="System.Xml.WriteState">
			<missing/>
		</field>
		<field name="Closed" type="System.Xml.WriteState">
			<missing/>
		</field>
		<field name="Content" type="System.Xml.WriteState">
			<missing/>
		</field>
		<field name="Element" type="System.Xml.WriteState">
			<missing/>
		</field>
		<field name="Prolog" type="System.Xml.WriteState">
			<missing/>
		</field>
		<field name="Start" type="System.Xml.WriteState">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Xml.XmlConvert" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlConvert()">
			<missing/>
		</ctor>
		<method name="DecodeName" signature="static System.String DecodeName(System.String name)">
			<missing/>
		</method>
		<method name="EncodeLocalName" signature="static System.String EncodeLocalName(System.String name)">
			<missing/>
		</method>
		<method name="EncodeName" signature="static System.String EncodeName(System.String name)">
			<missing/>
		</method>
		<method name="EncodeNmToken" signature="static System.String EncodeNmToken(System.String name)">
			<missing/>
		</method>
		<method name="ToBoolean" signature="static System.Boolean ToBoolean(System.String s)">
			<missing/>
		</method>
		<method name="ToByte" signature="static System.Byte ToByte(System.String s)">
			<missing/>
		</method>
		<method name="ToChar" signature="static System.Char ToChar(System.String s)">
			<missing/>
		</method>
		<method name="ToDateTime" signature="static System.DateTime ToDateTime(System.String s)">
			<missing/>
		</method>
		<method name="ToDateTime" signature="static System.DateTime ToDateTime(System.String s, System.String format)">
			<missing/>
		</method>
		<method name="ToDateTime" signature="static System.DateTime ToDateTime(System.String s, System.String[] formats)">
			<missing/>
		</method>
		<method name="ToDecimal" signature="static System.Decimal ToDecimal(System.String s)">
			<missing/>
		</method>
		<method name="ToDouble" signature="static System.Double ToDouble(System.String s)">
			<missing/>
		</method>
		<method name="ToInt16" signature="static System.Int16 ToInt16(System.String s)">
			<missing/>
		</method>
		<method name="ToInt32" signature="static System.Int32 ToInt32(System.String s)">
			<missing/>
		</method>
		<method name="ToInt64" signature="static System.Int64 ToInt64(System.String s)">
			<missing/>
		</method>
		<method name="ToSByte" signature="static System.SByte ToSByte(System.String s)">
			<missing/>
		</method>
		<method name="ToSingle" signature="static System.Single ToSingle(System.String s)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Boolean value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Char value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Decimal value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.SByte value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Int16 value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Int32 value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Int64 value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Byte value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.UInt16 value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.UInt32 value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.UInt64 value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Single value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.Double value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.TimeSpan value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.DateTime value)">
			<missing/>
		</method>
		<method name="ToString" signature="static System.String ToString(System.DateTime value, System.String format)">
			<missing/>
		</method>
		<method name="ToTimeSpan" signature="static System.TimeSpan ToTimeSpan(System.String s)">
			<missing/>
		</method>
		<method name="ToUInt16" signature="static System.UInt16 ToUInt16(System.String s)">
			<missing/>
		</method>
		<method name="ToUInt32" signature="static System.UInt32 ToUInt32(System.String s)">
			<missing/>
		</method>
		<method name="ToUInt64" signature="static System.UInt64 ToUInt64(System.String s)">
			<missing/>
		</method>
		<method name="VerifyNCName" signature="static System.String VerifyNCName(System.String name)">
			<missing/>
		</method>
		<method name="VerifyName" signature="static System.String VerifyName(System.String name)">
			<missing/>
		</method>
	</class>
	<class name="System.Xml.XmlException" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlException()">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlException(System.String message)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlException(System.String message, System.Exception innerException, System.Int32 lineNumber, System.Int32 linePosition)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlException(System.String message, System.Exception innerException)">
			<missing/>
		</ctor>
		<property name="LineNumber" type="System.Int32">
			<missing/>
		</property>
		<property name="LinePosition" type="System.Int32">
			<missing/>
		</property>
		<property name="Message" type="System.String">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlNameTable" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlNameTable()">
			<missing/>
		</ctor>
		<method name="Add" signature="System.String Add(System.String array)">
			<missing/>
		</method>
		<method name="Add" signature="System.String Add(System.Char[] array, System.Int32 offset, System.Int32 length)">
			<missing/>
		</method>
		<method name="Get" signature="System.String Get(System.String array)">
			<missing/>
		</method>
		<method name="Get" signature="System.String Get(System.Char[] array, System.Int32 offset, System.Int32 length)">
			<missing/>
		</method>
	</class>
	<class name="System.Xml.XmlNamespaceManager" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlNamespaceManager(System.Xml.XmlNameTable nameTable)">
			<missing/>
		</ctor>
		<method name="AddNamespace" signature="System.Void AddNamespace(System.String prefix, System.String uri)">
			<missing/>
		</method>
		<method name="GetEnumerator" signature="System.Collections.IEnumerator GetEnumerator()">
			<missing/>
		</method>
		<method name="HasNamespace" signature="System.Boolean HasNamespace(System.String prefix)">
			<missing/>
		</method>
		<method name="LookupNamespace" signature="System.String LookupNamespace(System.String prefix)">
			<missing/>
		</method>
		<method name="LookupPrefix" signature="System.String LookupPrefix(System.String uri)">
			<missing/>
		</method>
		<method name="PopScope" signature="System.Boolean PopScope()">
			<missing/>
		</method>
		<method name="PushScope" signature="System.Void PushScope()">
			<missing/>
		</method>
		<method name="RemoveNamespace" signature="System.Void RemoveNamespace(System.String prefix, System.String uri)">
			<missing/>
		</method>
		<property name="DefaultNamespace" type="System.String">
			<missing/>
		</property>
		<property name="NameTable" type="System.Xml.XmlNameTable">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlNodeType" assembly="System.Xml">
		<missing/>
		<field name="Attribute" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="CDATA" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="Comment" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="Document" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="DocumentFragment" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="DocumentType" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="Element" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="EndElement" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="EndEntity" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="Entity" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="EntityReference" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="None" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="Notation" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="ProcessingInstruction" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="SignificantWhitespace" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="Text" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="Whitespace" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="XmlDeclaration" type="System.Xml.XmlNodeType">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Xml.XmlParserContext" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String xmlLang, System.Xml.XmlSpace xmlSpace)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String docTypeName, System.String pubId, System.String sysId, System.String internalSubset, System.String baseURI, System.String xmlLang, System.Xml.XmlSpace xmlSpace)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String docTypeName, System.String pubId, System.String sysId, System.String internalSubset, System.String baseURI, System.String xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc)">
			<missing/>
		</ctor>
		<property name="BaseURI" type="System.String">
			<missing/>
		</property>
		<property name="DocTypeName" type="System.String">
			<missing/>
		</property>
		<property name="Encoding" type="System.Text.Encoding">
			<missing/>
		</property>
		<property name="InternalSubset" type="System.String">
			<missing/>
		</property>
		<property name="NameTable" type="System.Xml.XmlNameTable">
			<missing/>
		</property>
		<property name="NamespaceManager" type="System.Xml.XmlNamespaceManager">
			<missing/>
		</property>
		<property name="PublicId" type="System.String">
			<missing/>
		</property>
		<property name="SystemId" type="System.String">
			<missing/>
		</property>
		<property name="XmlLang" type="System.String">
			<missing/>
		</property>
		<property name="XmlSpace" type="System.Xml.XmlSpace">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlReader" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlReader()">
			<missing/>
		</ctor>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="GetAttribute" signature="System.String GetAttribute(System.Int32 i)">
			<missing/>
		</method>
		<method name="GetAttribute" signature="System.String GetAttribute(System.String name, System.String namespaceURI)">
			<missing/>
		</method>
		<method name="GetAttribute" signature="System.String GetAttribute(System.String name)">
			<missing/>
		</method>
		<method name="IsName" signature="static System.Boolean IsName(System.String str)">
			<missing/>
		</method>
		<method name="IsNameToken" signature="static System.Boolean IsNameToken(System.String str)">
			<missing/>
		</method>
		<method name="IsStartElement" signature="System.Boolean IsStartElement(System.String localname, System.String ns)">
			<missing/>
		</method>
		<method name="IsStartElement" signature="System.Boolean IsStartElement(System.String name)">
			<missing/>
		</method>
		<method name="IsStartElement" signature="System.Boolean IsStartElement()">
			<missing/>
		</method>
		<method name="LookupNamespace" signature="System.String LookupNamespace(System.String prefix)">
			<missing/>
		</method>
		<method name="MoveToAttribute" signature="System.Void MoveToAttribute(System.Int32 i)">
			<missing/>
		</method>
		<method name="MoveToAttribute" signature="System.Boolean MoveToAttribute(System.String name, System.String ns)">
			<missing/>
		</method>
		<method name="MoveToAttribute" signature="System.Boolean MoveToAttribute(System.String name)">
			<missing/>
		</method>
		<method name="MoveToContent" signature="System.Xml.XmlNodeType MoveToContent()">
			<missing/>
		</method>
		<method name="MoveToElement" signature="System.Boolean MoveToElement()">
			<missing/>
		</method>
		<method name="MoveToFirstAttribute" signature="System.Boolean MoveToFirstAttribute()">
			<missing/>
		</method>
		<method name="MoveToNextAttribute" signature="System.Boolean MoveToNextAttribute()">
			<missing/>
		</method>
		<method name="Read" signature="System.Boolean Read()">
			<missing/>
		</method>
		<method name="ReadAttributeValue" signature="System.Boolean ReadAttributeValue()">
			<missing/>
		</method>
		<method name="ReadElementString" signature="System.String ReadElementString(System.String localname, System.String ns)">
			<missing/>
		</method>
		<method name="ReadElementString" signature="System.String ReadElementString(System.String name)">
			<missing/>
		</method>
		<method name="ReadElementString" signature="System.String ReadElementString()">
			<missing/>
		</method>
		<method name="ReadEndElement" signature="System.Void ReadEndElement()">
			<missing/>
		</method>
		<method name="ReadInnerXml" signature="System.String ReadInnerXml()">
			<missing/>
		</method>
		<method name="ReadOuterXml" signature="System.String ReadOuterXml()">
			<missing/>
		</method>
		<method name="ReadStartElement" signature="System.Void ReadStartElement(System.String localname, System.String ns)">
			<missing/>
		</method>
		<method name="ReadStartElement" signature="System.Void ReadStartElement(System.String name)">
			<missing/>
		</method>
		<method name="ReadStartElement" signature="System.Void ReadStartElement()">
			<missing/>
		</method>
		<method name="ReadString" signature="System.String ReadString()">
			<missing/>
		</method>
		<method name="ResolveEntity" signature="System.Void ResolveEntity()">
			<missing/>
		</method>
		<method name="Skip" signature="System.Void Skip()">
			<missing/>
		</method>
		<property name="AttributeCount" type="System.Int32">
			<missing/>
		</property>
		<property name="BaseURI" type="System.String">
			<missing/>
		</property>
		<property name="CanResolveEntity" type="System.Boolean">
			<missing/>
		</property>
		<property name="Depth" type="System.Int32">
			<missing/>
		</property>
		<property name="EOF" type="System.Boolean">
			<missing/>
		</property>
		<property name="HasAttributes" type="System.Boolean">
			<missing/>
		</property>
		<property name="HasValue" type="System.Boolean">
			<missing/>
		</property>
		<property name="IsDefault" type="System.Boolean">
			<missing/>
		</property>
		<property name="IsEmptyElement" type="System.Boolean">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
		<property name="LocalName" type="System.String">
			<missing/>
		</property>
		<property name="Name" type="System.String">
			<missing/>
		</property>
		<property name="NameTable" type="System.Xml.XmlNameTable">
			<missing/>
		</property>
		<property name="NamespaceURI" type="System.String">
			<missing/>
		</property>
		<property name="NodeType" type="System.Xml.XmlNodeType">
			<missing/>
		</property>
		<property name="Prefix" type="System.String">
			<missing/>
		</property>
		<property name="QuoteChar" type="System.Char">
			<missing/>
		</property>
		<property name="ReadState" type="System.Xml.ReadState">
			<missing/>
		</property>
		<property name="Value" type="System.String">
			<missing/>
		</property>
		<property name="XmlLang" type="System.String">
			<missing/>
		</property>
		<property name="XmlSpace" type="System.Xml.XmlSpace">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlResolver" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlResolver()">
			<missing/>
		</ctor>
		<method name="GetEntity" signature="System.Object GetEntity(System.Uri absoluteUri, System.String role, System.Type ofObjectToReturn)">
			<missing/>
		</method>
		<method name="ResolveUri" signature="System.Uri ResolveUri(System.Uri baseUri, System.String relativeUri)">
			<missing/>
		</method>
		<property name="Credentials" type="System.Void">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlSpace" assembly="System.Xml">
		<missing/>
		<field name="Default" type="System.Xml.XmlSpace">
			<missing/>
		</field>
		<field name="None" type="System.Xml.XmlSpace">
			<missing/>
		</field>
		<field name="Preserve" type="System.Xml.XmlSpace">
			<missing/>
		</field>
		<field name="value__" type="System.Int32">
			<missing/>
		</field>
	</class>
	<class name="System.Xml.XmlTextReader" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlTextReader()">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.Xml.XmlNameTable nt)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.IO.Stream input)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.String url, System.IO.Stream input)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.IO.Stream input, System.Xml.XmlNameTable nt)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.String url, System.IO.Stream input, System.Xml.XmlNameTable nt)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.IO.TextReader input)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.String url, System.IO.TextReader input)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.IO.TextReader input, System.Xml.XmlNameTable nt)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.String url, System.IO.TextReader input, System.Xml.XmlNameTable nt)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.String xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.String url)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextReader(System.String url, System.Xml.XmlNameTable nt)">
			<missing/>
		</ctor>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="GetAttribute" signature="System.String GetAttribute(System.Int32 i)">
			<missing/>
		</method>
		<method name="GetAttribute" signature="System.String GetAttribute(System.String localName, System.String namespaceURI)">
			<missing/>
		</method>
		<method name="GetAttribute" signature="System.String GetAttribute(System.String name)">
			<missing/>
		</method>
		<method name="GetRemainder" signature="System.IO.TextReader GetRemainder()">
			<missing/>
		</method>
		<method name="LookupNamespace" signature="System.String LookupNamespace(System.String prefix)">
			<missing/>
		</method>
		<method name="MoveToAttribute" signature="System.Void MoveToAttribute(System.Int32 i)">
			<missing/>
		</method>
		<method name="MoveToAttribute" signature="System.Boolean MoveToAttribute(System.String localName, System.String namespaceURI)">
			<missing/>
		</method>
		<method name="MoveToAttribute" signature="System.Boolean MoveToAttribute(System.String name)">
			<missing/>
		</method>
		<method name="MoveToElement" signature="System.Boolean MoveToElement()">
			<missing/>
		</method>
		<method name="MoveToFirstAttribute" signature="System.Boolean MoveToFirstAttribute()">
			<missing/>
		</method>
		<method name="MoveToNextAttribute" signature="System.Boolean MoveToNextAttribute()">
			<missing/>
		</method>
		<method name="Read" signature="System.Boolean Read()">
			<missing/>
		</method>
		<method name="ReadAttributeValue" signature="System.Boolean ReadAttributeValue()">
			<missing/>
		</method>
		<method name="ReadBase64" signature="System.Int32 ReadBase64(System.Byte[] array, System.Int32 offset, System.Int32 len)">
			<missing/>
		</method>
		<method name="ReadBinHex" signature="System.Int32 ReadBinHex(System.Byte[] array, System.Int32 offset, System.Int32 len)">
			<missing/>
		</method>
		<method name="ReadChars" signature="System.Int32 ReadChars(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="ReadInnerXml" signature="System.String ReadInnerXml()">
			<missing/>
		</method>
		<method name="ReadOuterXml" signature="System.String ReadOuterXml()">
			<missing/>
		</method>
		<method name="ReadString" signature="System.String ReadString()">
			<missing/>
		</method>
		<method name="ResetState" signature="System.Void ResetState()">
			<missing/>
		</method>
		<method name="ResolveEntity" signature="System.Void ResolveEntity()">
			<missing/>
		</method>
		<property name="AttributeCount" type="System.Int32">
			<missing/>
		</property>
		<property name="BaseURI" type="System.String">
			<missing/>
		</property>
		<property name="Depth" type="System.Int32">
			<missing/>
		</property>
		<property name="EOF" type="System.Boolean">
			<missing/>
		</property>
		<property name="Encoding" type="System.Text.Encoding">
			<missing/>
		</property>
		<property name="HasValue" type="System.Boolean">
			<missing/>
		</property>
		<property name="IsDefault" type="System.Boolean">
			<missing/>
		</property>
		<property name="IsEmptyElement" type="System.Boolean">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
		<property name="Item" type="System.String">
			<missing/>
		</property>
		<property name="LineNumber" type="System.Int32">
			<missing/>
		</property>
		<property name="LinePosition" type="System.Int32">
			<missing/>
		</property>
		<property name="LocalName" type="System.String">
			<missing/>
		</property>
		<property name="Name" type="System.String">
			<missing/>
		</property>
		<property name="NameTable" type="System.Xml.XmlNameTable">
			<missing/>
		</property>
		<property name="NamespaceURI" type="System.String">
			<missing/>
		</property>
		<property name="Namespaces" type="System.Boolean">
			<missing/>
		</property>
		<property name="NodeType" type="System.Xml.XmlNodeType">
			<missing/>
		</property>
		<property name="Normalization" type="System.Boolean">
			<missing/>
		</property>
		<property name="Prefix" type="System.String">
			<missing/>
		</property>
		<property name="QuoteChar" type="System.Char">
			<missing/>
		</property>
		<property name="ReadState" type="System.Xml.ReadState">
			<missing/>
		</property>
		<property name="Value" type="System.String">
			<missing/>
		</property>
		<property name="WhitespaceHandling" type="System.Xml.WhitespaceHandling">
			<missing/>
		</property>
		<property name="XmlLang" type="System.String">
			<missing/>
		</property>
		<property name="XmlResolver" type="System.Void">
			<missing/>
		</property>
		<property name="XmlSpace" type="System.Xml.XmlSpace">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlTextWriter" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlTextWriter(System.IO.Stream w, System.Text.Encoding encoding)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextWriter(System.String filename, System.Text.Encoding encoding)">
			<missing/>
		</ctor>
		<ctor signature="System.Xml.XmlTextWriter(System.IO.TextWriter w)">
			<missing/>
		</ctor>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="Flush" signature="System.Void Flush()">
			<missing/>
		</method>
		<method name="LookupPrefix" signature="System.String LookupPrefix(System.String ns)">
			<missing/>
		</method>
		<method name="WriteBase64" signature="System.Void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteBinHex" signature="System.Void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteCData" signature="System.Void WriteCData(System.String text)">
			<missing/>
		</method>
		<method name="WriteCharEntity" signature="System.Void WriteCharEntity(System.Char ch)">
			<missing/>
		</method>
		<method name="WriteChars" signature="System.Void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteComment" signature="System.Void WriteComment(System.String text)">
			<missing/>
		</method>
		<method name="WriteDocType" signature="System.Void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)">
			<missing/>
		</method>
		<method name="WriteEndAttribute" signature="System.Void WriteEndAttribute()">
			<missing/>
		</method>
		<method name="WriteEndDocument" signature="System.Void WriteEndDocument()">
			<missing/>
		</method>
		<method name="WriteEndElement" signature="System.Void WriteEndElement()">
			<missing/>
		</method>
		<method name="WriteEntityRef" signature="System.Void WriteEntityRef(System.String name)">
			<missing/>
		</method>
		<method name="WriteFullEndElement" signature="System.Void WriteFullEndElement()">
			<missing/>
		</method>
		<method name="WriteName" signature="System.Void WriteName(System.String name)">
			<missing/>
		</method>
		<method name="WriteNmToken" signature="System.Void WriteNmToken(System.String name)">
			<missing/>
		</method>
		<method name="WriteProcessingInstruction" signature="System.Void WriteProcessingInstruction(System.String name, System.String text)">
			<missing/>
		</method>
		<method name="WriteQualifiedName" signature="System.Void WriteQualifiedName(System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteRaw" signature="System.Void WriteRaw(System.String data)">
			<missing/>
		</method>
		<method name="WriteRaw" signature="System.Void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteStartAttribute" signature="System.Void WriteStartAttribute(System.String prefix, System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteStartDocument" signature="System.Void WriteStartDocument(System.Boolean standalone)">
			<missing/>
		</method>
		<method name="WriteStartDocument" signature="System.Void WriteStartDocument()">
			<missing/>
		</method>
		<method name="WriteStartElement" signature="System.Void WriteStartElement(System.String prefix, System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteString" signature="System.Void WriteString(System.String text)">
			<missing/>
		</method>
		<method name="WriteSurrogateCharEntity" signature="System.Void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)">
			<missing/>
		</method>
		<method name="WriteWhitespace" signature="System.Void WriteWhitespace(System.String ws)">
			<missing/>
		</method>
		<property name="BaseStream" type="System.IO.Stream">
			<missing/>
		</property>
		<property name="Formatting" type="System.Xml.Formatting">
			<missing/>
		</property>
		<property name="IndentChar" type="System.Char">
			<missing/>
		</property>
		<property name="Indentation" type="System.Int32">
			<missing/>
		</property>
		<property name="Namespaces" type="System.Boolean">
			<missing/>
		</property>
		<property name="QuoteChar" type="System.Char">
			<missing/>
		</property>
		<property name="WriteState" type="System.Xml.WriteState">
			<missing/>
		</property>
		<property name="XmlLang" type="System.String">
			<missing/>
		</property>
		<property name="XmlSpace" type="System.Xml.XmlSpace">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlUrlResolver" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlUrlResolver()">
			<missing/>
		</ctor>
		<method name="GetEntity" signature="System.Object GetEntity(System.Uri absoluteUri, System.String role, System.Type ofObjectToReturn)">
			<missing/>
		</method>
		<method name="ResolveUri" signature="System.Uri ResolveUri(System.Uri baseUri, System.String relativeUri)">
			<missing/>
		</method>
		<property name="Credentials" type="System.Void">
			<missing/>
		</property>
	</class>
	<class name="System.Xml.XmlWriter" assembly="System.Xml">
		<missing/>
		<ctor signature="System.Xml.XmlWriter()">
			<missing/>
		</ctor>
		<method name="Close" signature="System.Void Close()">
			<missing/>
		</method>
		<method name="Flush" signature="System.Void Flush()">
			<missing/>
		</method>
		<method name="LookupPrefix" signature="System.String LookupPrefix(System.String ns)">
			<missing/>
		</method>
		<method name="WriteAttributeString" signature="System.Void WriteAttributeString(System.String localName, System.String ns, System.String value)">
			<missing/>
		</method>
		<method name="WriteAttributeString" signature="System.Void WriteAttributeString(System.String localName, System.String value)">
			<missing/>
		</method>
		<method name="WriteAttributeString" signature="System.Void WriteAttributeString(System.String prefix, System.String localName, System.String ns, System.String value)">
			<missing/>
		</method>
		<method name="WriteAttributes" signature="System.Void WriteAttributes(System.Xml.XmlReader reader, System.Boolean defattr)">
			<missing/>
		</method>
		<method name="WriteBase64" signature="System.Void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteBinHex" signature="System.Void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteCData" signature="System.Void WriteCData(System.String text)">
			<missing/>
		</method>
		<method name="WriteCharEntity" signature="System.Void WriteCharEntity(System.Char ch)">
			<missing/>
		</method>
		<method name="WriteChars" signature="System.Void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteComment" signature="System.Void WriteComment(System.String text)">
			<missing/>
		</method>
		<method name="WriteDocType" signature="System.Void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)">
			<missing/>
		</method>
		<method name="WriteElementString" signature="System.Void WriteElementString(System.String localName, System.String value)">
			<missing/>
		</method>
		<method name="WriteElementString" signature="System.Void WriteElementString(System.String localName, System.String ns, System.String value)">
			<missing/>
		</method>
		<method name="WriteEndAttribute" signature="System.Void WriteEndAttribute()">
			<missing/>
		</method>
		<method name="WriteEndDocument" signature="System.Void WriteEndDocument()">
			<missing/>
		</method>
		<method name="WriteEndElement" signature="System.Void WriteEndElement()">
			<missing/>
		</method>
		<method name="WriteEntityRef" signature="System.Void WriteEntityRef(System.String name)">
			<missing/>
		</method>
		<method name="WriteFullEndElement" signature="System.Void WriteFullEndElement()">
			<missing/>
		</method>
		<method name="WriteName" signature="System.Void WriteName(System.String name)">
			<missing/>
		</method>
		<method name="WriteNmToken" signature="System.Void WriteNmToken(System.String name)">
			<missing/>
		</method>
		<method name="WriteNode" signature="System.Void WriteNode(System.Xml.XmlReader reader, System.Boolean defattr)">
			<missing/>
		</method>
		<method name="WriteProcessingInstruction" signature="System.Void WriteProcessingInstruction(System.String name, System.String text)">
			<missing/>
		</method>
		<method name="WriteQualifiedName" signature="System.Void WriteQualifiedName(System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteRaw" signature="System.Void WriteRaw(System.String data)">
			<missing/>
		</method>
		<method name="WriteRaw" signature="System.Void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)">
			<missing/>
		</method>
		<method name="WriteStartAttribute" signature="System.Void WriteStartAttribute(System.String prefix, System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteStartAttribute" signature="System.Void WriteStartAttribute(System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteStartDocument" signature="System.Void WriteStartDocument(System.Boolean standalone)">
			<missing/>
		</method>
		<method name="WriteStartDocument" signature="System.Void WriteStartDocument()">
			<missing/>
		</method>
		<method name="WriteStartElement" signature="System.Void WriteStartElement(System.String prefix, System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteStartElement" signature="System.Void WriteStartElement(System.String localName, System.String ns)">
			<missing/>
		</method>
		<method name="WriteStartElement" signature="System.Void WriteStartElement(System.String localName)">
			<missing/>
		</method>
		<method name="WriteString" signature="System.Void WriteString(System.String text)">
			<missing/>
		</method>
		<method name="WriteSurrogateCharEntity" signature="System.Void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)">
			<missing/>
		</method>
		<method name="WriteWhitespace" signature="System.Void WriteWhitespace(System.String ws)">
			<missing/>
		</method>
		<property name="WriteState" type="System.Xml.WriteState">
			<missing/>
		</property>
		<property name="XmlLang" type="System.String">
			<missing/>
		</property>
		<property name="XmlSpace" type="System.Xml.XmlSpace">
			<missing/>
		</property>
	</class>
	<summary types="294" validated="156" extra="0"/>
</class_status>
