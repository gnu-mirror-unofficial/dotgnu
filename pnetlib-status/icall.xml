<InternalCallStatus>
<class namespace="Platform" name="Security">
	 <internalcall name="SetSecurityManager" class = "Platform.Security"  signature="void Platform.Security::SetSecurityManager(class Platform.ISecurityManager mgr)" status="MISSING"/>
	 <internalcall name="GetSecurityManager" class = "Platform.Security"  signature=" class Platform.ISecurityManager Platform.Security::GetSecurityManager()" status="MISSING"/>
</class>
<class namespace="Platform" name="RuntimeSecurityManager">
	 <internalcall name="CanOpenFile" class = "Platform.RuntimeSecurityManager"  signature="instance bool Platform.RuntimeSecurityManager::CanOpenFile(class System.String path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share)" status="MISSING"/>
	 <internalcall name="CanUseFileHandle" class = "Platform.RuntimeSecurityManager"  signature="instance bool Platform.RuntimeSecurityManager::CanUseFileHandle(native int handle)" status="MISSING"/>
</class>
<class namespace="Platform" name="FileMethods">
	 <internalcall name="GetErrnoMessage" class = "Platform.FileMethods"  signature=" class System.String Platform.FileMethods::GetErrnoMessage(valuetype Platform.Errno errno)" status="MISSING"/>
	 <internalcall name="GetErrno" class = "Platform.FileMethods"  signature="valuetype Platform.Errno Platform.FileMethods::GetErrno()" status="MISSING"/>
	 <internalcall name="SetLength" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::SetLength(native int handle, int64 value)" status="MISSING"/>
	 <internalcall name="FlushWrite" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::FlushWrite(native int handle)" status="MISSING"/>
	 <internalcall name="Close" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::Close(native int handle)" status="MISSING"/>
	 <internalcall name="Read" class = "Platform.FileMethods"  signature="int32 Platform.FileMethods::Read(native int handle, unsigned int8[] buffer, int32 offset, int32 count)" status="MISSING"/>
	 <internalcall name="Write" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::Write(native int handle, unsigned int8[] buffer, int32 offset, int32 count)" status="MISSING"/>
	 <internalcall name="Seek" class = "Platform.FileMethods"  signature="int64 Platform.FileMethods::Seek(native int handle, int64 offset, valuetype System.IO.SeekOrigin origin)" status="MISSING"/>
	 <internalcall name="CheckHandleAccess" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::CheckHandleAccess(native int handle, valuetype System.IO.FileAccess access)" status="MISSING"/>
	 <internalcall name="CanSeek" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::CanSeek(native int handle)" status="MISSING"/>
	 <internalcall name="HasAsync" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::HasAsync()" status="MISSING"/>
	 <internalcall name="Open" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::Open(class System.String path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, [out] native int &amp; handle)" status="MISSING"/>
	 <internalcall name="ValidatePathname" class = "Platform.FileMethods"  signature="bool Platform.FileMethods::ValidatePathname(class System.String path)" status="MISSING"/>
	 <internalcall name="GetInvalidHandle" class = "Platform.FileMethods"  signature="native int Platform.FileMethods::GetInvalidHandle()" status="MISSING"/>
</class>
<class namespace="Platform" name="DirMethods">
	 <internalcall name="Rename" class = "Platform.DirMethods"  signature="valuetype Platform.Errno Platform.DirMethods::Rename(class System.String old_name, class System.String new_name)" status="MISSING"/>
	 <internalcall name="Delete" class = "Platform.DirMethods"  signature="valuetype Platform.Errno Platform.DirMethods::Delete(class System.String path)" status="MISSING"/>
	 <internalcall name="Copy" class = "Platform.DirMethods"  signature="valuetype Platform.Errno Platform.DirMethods::Copy(class System.String src, class System.String dest)" status="MISSING"/>
	 <internalcall name="GetCreationTime" class = "Platform.DirMethods"  signature="valuetype Platform.Errno Platform.DirMethods::GetCreationTime(class System.String path, [out] int64 &amp; create_time)" status="MISSING"/>
	 <internalcall name="GetLastModification" class = "Platform.DirMethods"  signature="valuetype Platform.Errno Platform.DirMethods::GetLastModification(class System.String path, [out] int64 &amp; last_mod)" status="MISSING"/>
	 <internalcall name="GetLastAccess" class = "Platform.DirMethods"  signature="valuetype Platform.Errno Platform.DirMethods::GetLastAccess(class System.String path, [out] int64 &amp; lastac)" status="MISSING"/>
</class>
<class namespace="System.Threading" name="Mutex">
	 <internalcall name="InternalReleaseMutex" class = "System.Threading.Mutex"  signature="void System.Threading.Mutex::InternalReleaseMutex(native int mutex)" status="MISSING"/>
	 <internalcall name="InternalCreateMutex" class = "System.Threading.Mutex"  signature="native int System.Threading.Mutex::InternalCreateMutex(bool initiallyOwned, class System.String name, [out] bool &amp; gotOwnership)" status="MISSING"/>
</class>
<class namespace="System.Threading" name="WaitHandle">
	 <internalcall name="InternalWaitOne" class = "System.Threading.WaitHandle"  signature="bool System.Threading.WaitHandle::InternalWaitOne(native int privateData, int32 timeout)" status="MISSING"/>
	 <internalcall name="InternalWaitAny" class = "System.Threading.WaitHandle"  signature="int32 System.Threading.WaitHandle::InternalWaitAny(class System.Threading.WaitHandle[] waitHandles, int32 timeout, bool exitContext)" status="MISSING"/>
	 <internalcall name="InternalWaitAll" class = "System.Threading.WaitHandle"  signature="bool System.Threading.WaitHandle::InternalWaitAll(class System.Threading.WaitHandle[] waitHandles, int32 timeout, bool exitContext)" status="MISSING"/>
	 <internalcall name="InternalClose" class = "System.Threading.WaitHandle"  signature="void System.Threading.WaitHandle::InternalClose(native int privateData)" status="MISSING"/>
</class>
<class namespace="System.Text" name="DefaultEncoding">
	 <internalcall name="InternalGetString" class = "System.Text.DefaultEncoding"  signature=" class System.String System.Text.DefaultEncoding::InternalGetString(unsigned int8[] bytes, int32 index, int32 count)" status="MISSING"/>
	 <internalcall name="InternalGetMaxCharCount" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetMaxCharCount(int32 byteCount)" status="MISSING"/>
	 <internalcall name="InternalGetMaxByteCount" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetMaxByteCount(int32 charCount)" status="MISSING"/>
	 <internalcall name="InternalGetChars" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)" status="MISSING"/>
	 <internalcall name="InternalGetCharCount" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetCharCount(unsigned int8[] bytes, int32 index, int32 count)" status="MISSING"/>
	 <internalcall name="InternalGetBytes" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetBytes(class System.String s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex)" status="MISSING"/>
	 <internalcall name="InternalGetBytes" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex)" status="MISSING"/>
	 <internalcall name="InternalGetByteCount" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetByteCount(class System.String s, int32 index, int32 count)" status="MISSING"/>
	 <internalcall name="InternalGetByteCount" class = "System.Text.DefaultEncoding"  signature="int32 System.Text.DefaultEncoding::InternalGetByteCount(char[] chars, int32 index, int32 count)" status="MISSING"/>
</class>
<class namespace="System.Security" name="CodeAccessPermission">
	 <internalcall name="RevertPermitOnly" class = "System.Security.CodeAccessPermission"  signature="void System.Security.CodeAccessPermission::RevertPermitOnly()" status="MISSING"/>
	 <internalcall name="RevertDeny" class = "System.Security.CodeAccessPermission"  signature="void System.Security.CodeAccessPermission::RevertDeny()" status="MISSING"/>
	 <internalcall name="RevertAssert" class = "System.Security.CodeAccessPermission"  signature="void System.Security.CodeAccessPermission::RevertAssert()" status="MISSING"/>
	 <internalcall name="RevertAll" class = "System.Security.CodeAccessPermission"  signature="void System.Security.CodeAccessPermission::RevertAll()" status="MISSING"/>
</class>
<class namespace="System.Security" name="ClrSecurity">
	 <internalcall name="PermitOnly" class = "System.Security.ClrSecurity"  signature="void System.Security.ClrSecurity::PermitOnly(class System.Security.CodeAccessPermission perm, int32 skipFrames)" status="MISSING"/>
	 <internalcall name="SetPermitOnlyBlock" class = "System.Security.ClrSecurity"  signature="void System.Security.ClrSecurity::SetPermitOnlyBlock(int32 skipFrames)" status="MISSING"/>
	 <internalcall name="Deny" class = "System.Security.ClrSecurity"  signature="void System.Security.ClrSecurity::Deny(class System.Security.CodeAccessPermission perm, int32 skipFrames)" status="MISSING"/>
	 <internalcall name="Demand" class = "System.Security.ClrSecurity"  signature="bool System.Security.ClrSecurity::Demand(class System.Security.CodeAccessPermission perm, int32 skipFrames)" status="MISSING"/>
	 <internalcall name="Assert" class = "System.Security.ClrSecurity"  signature="bool System.Security.ClrSecurity::Assert(class System.Security.CodeAccessPermission perm, int32 skipFrames)" status="MISSING"/>
</class>
<class namespace="System.Runtime.InteropServices" name="GCHandle">
	 <internalcall name="GCSetTarget" class = "System.Runtime.InteropServices.GCHandle"  signature="void System.Runtime.InteropServices.GCHandle::GCSetTarget(int32 handle, class System.Object value, bool isPinned)" status="MISSING"/>
	 <internalcall name="GCGetTarget" class = "System.Runtime.InteropServices.GCHandle"  signature=" class System.Object System.Runtime.InteropServices.GCHandle::GCGetTarget(int32 handle)" status="MISSING"/>
	 <internalcall name="GCValidate" class = "System.Runtime.InteropServices.GCHandle"  signature="bool System.Runtime.InteropServices.GCHandle::GCValidate(int32 handle)" status="MISSING"/>
	 <internalcall name="GCFree" class = "System.Runtime.InteropServices.GCHandle"  signature="void System.Runtime.InteropServices.GCHandle::GCFree(int32 handle)" status="MISSING"/>
	 <internalcall name="GCAlloc" class = "System.Runtime.InteropServices.GCHandle"  signature="int32 System.Runtime.InteropServices.GCHandle::GCAlloc(class System.Object value, valuetype System.Runtime.InteropServices.GCHandleType type)" status="MISSING"/>
	 <internalcall name="GCAddrOfPinnedObject" class = "System.Runtime.InteropServices.GCHandle"  signature="native int System.Runtime.InteropServices.GCHandle::GCAddrOfPinnedObject(int32 handle)" status="MISSING"/>
</class>
<class namespace="System.Runtime.CompilerServices" name="RuntimeHelpers">
	 <internalcall name="GetObjectValue" class = "System.Runtime.CompilerServices.RuntimeHelpers"  signature=" class System.Object System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(class System.Object obj)" status="MISSING"/>
	 <internalcall name="InternalOffsetToStringData" class = "System.Runtime.CompilerServices.RuntimeHelpers"  signature="int32 System.Runtime.CompilerServices.RuntimeHelpers::InternalOffsetToStringData()" status="MISSING"/>
	 <internalcall name="RunClassConstructor" class = "System.Runtime.CompilerServices.RuntimeHelpers"  signature="void System.Runtime.CompilerServices.RuntimeHelpers::RunClassConstructor(valuetype System.RuntimeTypeHandle type)" status="MISSING"/>
</class>
<class namespace="System.Reflection" name="Module">
	 <internalcall name="GetFullName" class = "System.Reflection.Module"  signature="instance class System.String System.Reflection.Module::GetFullName()" status="MISSING"/>
	 <internalcall name="GetAssembly" class = "System.Reflection.Module"  signature="instance class System.Reflection.Assembly System.Reflection.Module::GetAssembly()" status="MISSING"/>
	 <internalcall name="GetModuleType" class = "System.Reflection.Module"  signature="instance class System.Type System.Reflection.Module::GetModuleType()" status="MISSING"/>
	 <internalcall name="IsResource" class = "System.Reflection.Module"  signature="instance bool System.Reflection.Module::IsResource()" status="MISSING"/>
	 <internalcall name="GetTypes" class = "System.Reflection.Module"  signature="instance class System.Type[] System.Reflection.Module::GetTypes()" status="MISSING"/>
	 <internalcall name="GetType" class = "System.Reflection.Module"  signature="instance class System.Type System.Reflection.Module::GetType(class System.String name, bool throwOnError, bool ignoreCase)" status="MISSING"/>
</class>
<class namespace="System.Reflection" name="ClrType">
	 <internalcall name="GetClrNamespace" class = "System.Reflection.ClrType"  signature="instance class System.String System.Reflection.ClrType::GetClrNamespace()" status="MISSING"/>
	 <internalcall name="GetClrName" class = "System.Reflection.ClrType"  signature="instance class System.String System.Reflection.ClrType::GetClrName()" status="MISSING"/>
	 <internalcall name="GetInterfaces" class = "System.Reflection.ClrType"  signature="instance class System.Type[] System.Reflection.ClrType::GetInterfaces()" status="MISSING"/>
	 <internalcall name="GetInterface" class = "System.Reflection.ClrType"  signature="instance class System.Type System.Reflection.ClrType::GetInterface(class System.String name, bool ignoreCase)" status="MISSING"/>
	 <internalcall name="GetAttributeFlagsImpl" class = "System.Reflection.ClrType"  signature="instance valuetype System.Reflection.TypeAttributes System.Reflection.ClrType::GetAttributeFlagsImpl()" status="MISSING"/>
</class>
<class namespace="System.Reflection" name="ClrMethod">
	 <internalcall name="GetBaseDefinition" class = "System.Reflection.ClrMethod"  signature="instance class System.Reflection.MethodInfo System.Reflection.ClrMethod::GetBaseDefinition()" status="MISSING"/>
</class>
<class namespace="System.Reflection" name="ClrHelpers">
	 <internalcall name="HasSemantics" class = "System.Reflection.ClrHelpers"  signature="bool System.Reflection.ClrHelpers::HasSemantics(native int item, valuetype System.Reflection.MethodSemanticsAttributes type, bool nonPublic)" status="MISSING"/>
	 <internalcall name="GetSemantics" class = "System.Reflection.ClrHelpers"  signature=" class System.Reflection.MethodInfo System.Reflection.ClrHelpers::GetSemantics(native int item, valuetype System.Reflection.MethodSemanticsAttributes type, bool nonPublic)" status="MISSING"/>
	 <internalcall name="GetImplAttrs" class = "System.Reflection.ClrHelpers"  signature="valuetype System.Reflection.MethodImplAttributes System.Reflection.ClrHelpers::GetImplAttrs(native int item)" status="MISSING"/>
</class>
<class namespace="System.Reflection" name="ClrField">
	 <internalcall name="SetValueDirect" class = "System.Reflection.ClrField"  signature="instance void System.Reflection.ClrField::SetValueDirect(typedref obj, class System.Object value)" status="MISSING"/>
	 <internalcall name="GetValueDirect" class = "System.Reflection.ClrField"  signature="instance class System.Object System.Reflection.ClrField::GetValueDirect(typedref obj)" status="MISSING"/>
	 <internalcall name="GetFieldType" class = "System.Reflection.ClrField"  signature=" class System.Type System.Reflection.ClrField::GetFieldType(native int item)" status="MISSING"/>
	 <internalcall name="SetValue" class = "System.Reflection.ClrField"  signature="instance void System.Reflection.ClrField::SetValue(class System.Object obj, class System.Object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, class System.Globalization.CultureInfo culture)" status="MISSING"/>
	 <internalcall name="GetValue" class = "System.Reflection.ClrField"  signature="instance class System.Object System.Reflection.ClrField::GetValue(class System.Object obj)" status="MISSING"/>
</class>
<class namespace="System.Reflection" name="MethodBase">
	 <internalcall name="GetCurrentMethod" class = "System.Reflection.MethodBase"  signature=" class System.Reflection.MethodBase System.Reflection.MethodBase::GetCurrentMethod()" status="MISSING"/>
</class>
<class namespace="System.Reflection" name="Assembly">
	 <internalcall name="GetTypes" class = "System.Reflection.Assembly"  signature="instance class System.Type[] System.Reflection.Assembly::GetTypes()" status="MISSING"/>
	 <internalcall name="GetFile" class = "System.Reflection.Assembly"  signature="instance class System.IO.FileStream System.Reflection.Assembly::GetFile(class System.String name)" status="MISSING"/>
	 <internalcall name="GetExportedTypes" class = "System.Reflection.Assembly"  signature="instance class System.Type[] System.Reflection.Assembly::GetExportedTypes()" status="MISSING"/>
</class>
<class namespace="System" name="TypedReference">
	 <internalcall name="ToObject" class = "System.TypedReference"  signature=" class System.Object System.TypedReference::ToObject(typedref value)" status="MISSING"/>
	 <internalcall name="SetTypedReference" class = "System.TypedReference"  signature="void System.TypedReference::SetTypedReference(typedref target, class System.Object value)" status="MISSING"/>
	 <internalcall name="ClrMakeTypedReference" class = "System.TypedReference"  signature="typedref System.TypedReference::ClrMakeTypedReference(class System.Object target, class System.Reflection.FieldInfo[] flds)" status="MISSING"/>
</class>
<class namespace="System" name="String">
	 <internalcall name="IsInterned" class = "System.String"  signature=" class System.String System.String::IsInterned(class System.String str)" status="MISSING"/>
	 <internalcall name="Intern" class = "System.String"  signature=" class System.String System.String::Intern(class System.String str)" status="MISSING"/>
	 <internalcall name="Concat" class = "System.String"  signature=" class System.String System.String::Concat(class System.String str1, class System.String str2, class System.String str3)" status="MISSING"/>
	 <internalcall name="Concat" class = "System.String"  signature=" class System.String System.String::Concat(class System.String str1, class System.String str2)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(int8 * value)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(int8 * value, int32 startIndex, int32 length)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(int8 * value, int32 startIndex, int32 length, class System.Text.Encoding enc)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(char * value)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(char * value, int32 startIndex, int32 length)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(char c, int32 count)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(char[] value)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.String"  signature="instance void System.String::.ctor(char[] value, int32 startIndex, int32 length)" status="MISSING"/>
</class>
<class namespace="System" name="RuntimeMethodHandle">
	 <internalcall name="GetFunctionPointer" class = "System.RuntimeMethodHandle"  signature="instance native int System.RuntimeMethodHandle::GetFunctionPointer()" status="MISSING"/>
</class>
<class namespace="System" name="Math">
	 <internalcall name="Pow" class = "System.Math"  signature="float64 System.Math::Pow(float64 x, float64 y)" status="MISSING"/>
</class>
<class namespace="System" name="GC">
	 <internalcall name="WaitForPendingFinalizers" class = "System.GC"  signature="void System.GC::WaitForPendingFinalizers()" status="MISSING"/>
	 <internalcall name="SuppressFinalize" class = "System.GC"  signature="void System.GC::SuppressFinalize(class System.Object obj)" status="MISSING"/>
	 <internalcall name="ReRegisterForFinalize" class = "System.GC"  signature="void System.GC::ReRegisterForFinalize(class System.Object obj)" status="MISSING"/>
	 <internalcall name="KeepAlive" class = "System.GC"  signature="void System.GC::KeepAlive(class System.Object obj)" status="MISSING"/>
</class>
<class namespace="System" name="BitConverter">
	 <internalcall name="Int32BitsToFloat" class = "System.BitConverter"  signature="float32 System.BitConverter::Int32BitsToFloat(int32 value)" status="MISSING"/>
	 <internalcall name="FloatToInt32Bits" class = "System.BitConverter"  signature="int32 System.BitConverter::FloatToInt32Bits(float32 value)" status="MISSING"/>
</class>
<class namespace="System" name="Enum">
	 <internalcall name="FormatEnumWithFlags" class = "System.Enum"  signature=" class System.String System.Enum::FormatEnumWithFlags(class System.Type enumType, class System.Object value)" status="MISSING"/>
	 <internalcall name="EnumLongToObject" class = "System.Enum"  signature=" class System.Object System.Enum::EnumLongToObject(class System.Type enumType, int64 value)" status="MISSING"/>
	 <internalcall name="EnumIntToObject" class = "System.Enum"  signature=" class System.Object System.Enum::EnumIntToObject(class System.Type enumType, int32 value)" status="MISSING"/>
	 <internalcall name="EnumValueOr" class = "System.Enum"  signature=" class System.Object System.Enum::EnumValueOr(class System.Object value1, class System.Object value2)" status="MISSING"/>
	 <internalcall name="GetEnumValueFromName" class = "System.Enum"  signature=" class System.Object System.Enum::GetEnumValueFromName(class System.Type enumType, class System.Object value, bool ignoreCase)" status="MISSING"/>
	 <internalcall name="IsEnumValue" class = "System.Enum"  signature="bool System.Enum::IsEnumValue(class System.Type enumType, class System.Object value)" status="MISSING"/>
	 <internalcall name="GetEnumName" class = "System.Enum"  signature=" class System.String System.Enum::GetEnumName(class System.Type enumType, class System.Object value)" status="MISSING"/>
	 <internalcall name="GetEnumValue" class = "System.Enum"  signature="instance class System.Object System.Enum::GetEnumValue()" status="MISSING"/>
</class>
<class namespace="System" name="Array">
	 <internalcall name="CreateArray" class = "System.Array"  signature=" class System.Array System.Array::CreateArray(native int elementType, int32[] lengths, int32[] lowerBounds)" status="MISSING"/>
</class>
<class namespace="System" name="Delegate">
	 <internalcall name="CreateBlankDelegate" class = "System.Delegate"  signature=" class System.Delegate System.Delegate::CreateBlankDelegate(class System.Type type, class System.Reflection.ClrMethod method)" status="MISSING"/>
</class>
<class namespace="System" name="ArgIterator">
	 <internalcall name="GetRemainingCount" class = "System.ArgIterator"  signature="instance int32 System.ArgIterator::GetRemainingCount()" status="MISSING"/>
	 <internalcall name="GetNextArgType" class = "System.ArgIterator"  signature="instance valuetype System.RuntimeTypeHandle System.ArgIterator::GetNextArgType()" status="MISSING"/>
	 <internalcall name="GetNextArg" class = "System.ArgIterator"  signature="instance typedref System.ArgIterator::GetNextArg(valuetype System.RuntimeTypeHandle type)" status="MISSING"/>
	 <internalcall name="GetNextArg" class = "System.ArgIterator"  signature="instance typedref System.ArgIterator::GetNextArg()" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.ArgIterator"  signature="instance void System.ArgIterator::.ctor(valuetype System.RuntimeArgumentHandle argList, void * ptr)" status="MISSING"/>
	 <internalcall name=".ctor" class = "System.ArgIterator"  signature="instance void System.ArgIterator::.ctor(valuetype System.RuntimeArgumentHandle argList)" status="MISSING"/>
</class>
<class namespace="System" name="Object">
	 <internalcall name="MemberwiseClone" class = "System.Object"  signature="instance class System.Object System.Object::MemberwiseClone()" status="MISSING"/>
	 <internalcall name="Equals" class = "System.Object"  signature="instance bool System.Object::Equals(class System.Object obj)" status="MISSING"/>
</class>
</InternalCallStatus>
