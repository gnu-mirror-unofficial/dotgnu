DotGNU is an alternate platform and enviroment.


Its an enviroment because it will consists of a series of common API's (or Remote Objects) and services,
which will allow transparent acces to data, programs on remote systems, and or Web Services.

However it is a platform becasue application written for DotGNU will not have to worry about, the host they operate in (ie: OS, CPU, and other soft/hardware issues). In this it would very similar to Java.

An example as to how its an enviroment, you can have a native application (ie: GNU Emacs, native- referring compiled to run under a certain OS and Hardware config) and yet have access to the DotGNU Network Enviroment, by using API calls to remote servers. 

Another example, would be that of a platform, in that it can run program build for .GNU with out having to worry about the Host Machine configuration, ie: program built this way use byte code. However unlike the Java Platform DotGNU is not limited to one Language .

DotGNU will also be a decentralised system. Unlike .NET and Hailstorm in which both rely on central networks and servers, this means that more than one service provider can exists for DotGNU.  

XML (such as XML-rpc, XML-HTTP, etc), Compoment Objects (Bonobo), Peer to Peer communication. 

So in short here a brief cap on what DotGNU is at the moment:

1. A language independet Platform (ie: support any language not one specific)
2. Usage of common Developement tools, to make the transition transparent
3. An independent platform (ie: like Java) of OS and Hardware configuration for Programs
4. Usage of technologies such as XML, and Bonobo
5. De-centralised networks, tied in by a commond API, Objects for resource location and transactions
6. In the future offer compatability with .NET, HailStorm and Flurry
7. Uses the GNU GPL
8. A series of Objects and Services, tied in by the Common API







What it is not:

1.Not an .NET CLONE! It is not a Free implementation of .NET, yes it is compatible with .NET, yes it can run .NET binaries.  However people developing for this platform should not use any .NET classes, the only reason they are there is to make porting of .NET to .GNU easier.

2.DotGNU will not exclusively talk to .NET servers only, this will only happen if the user, is using a .NET app on the Platform, otherwise this should not happen
3.It is not a replacement for APACHE, XLM-RPC, Corba, Samba, GNU/Linux, BSD
4.No it is not just a ASP platform. It is more of a Distributed System infrastructure, which one can build ASP, or any other form of Distributed system on. 


What is is:

1.A Platform in it's own right, that is people can write any programs on it, and be cross-portable akin to Java, but unlike Java it supports multiple Languages
2. There can be more than just one DotGNU server providing Services or Objects for transactions or for calls. That is DotGNU will support a distributed network using some sort of URL to located servers and resources (which the user trusts)
3.It will provide compatability with .NET apps
4.Will provide GUI front ends (Probably using GNOME bindings)
5.Hopefully in the future allow some sort of 3D bindings
6. Uses some sort of hierachy (akin to DNS, to locate resources)


Objectives of this project:

To create a Compatible alternative to MS .NET while at the same time, try to convert developers to the Free Software Paradigm, by providing a already usable and stable inferstructure for Distributed systems wchih can readily share information.


