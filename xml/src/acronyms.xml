<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE content
[
<!--======================================== modify but don't delete ========================================-->
 <!ENTITY base "./">
 <!ENTITY title	"DotGNU and .NET Acronyms">
 <!ENTITY this "acronyms.html">
 <!ENTITY maintainer "&lt;a href=&quot;http://norbert.ch/&quot;&gt;Norbert Bollow&lt;/a&gt; &lt;a href=&quot;mailto:nb@SoftwareEconomics.biz&quot;&gt;&_lt_;nb@SoftwareEconomics.biz&_gt_;&lt;/a&gt;">
 <!ENTITY modtime "Thu March 13, 2003">
<!--======================================== modify but don't delete ========================================-->

<!--======================================== add custom entities here ========================================-->
<!--======================================== add custom entities here ========================================-->

<!--======================================== declared here, defined elsewhere ========================================-->

 <!-- First block: "Homepage" + Information that sells DotGNU to developers -->
 <!ENTITY nav.functionality "">
 <!ENTITY nav.freedom "">
 <!ENTITY nav.web_services "">
 <!ENTITY nav.auth "">
 <!ENTITY nav.innovation "">
 <!ENTITY nav.stereo "">
 <!ENTITY nav.acronyms "">
 <!ENTITY nav.testimonials "">
 <!ENTITY nav.win "">

 <!-- Second block: "Useful DotGNU Software" - Let the code talk -->
 <!ENTITY nav.phpgw "">
 <!ENTITY nav.dgee "">
 <!ENTITY nav.see "">
 <!ENTITY nav.dee "">
 <!ENTITY nav.vrs "">
 <!ENTITY nav.pnet "">
 <!ENTITY nav.snapshots "">
 <!ENTITY nav.downloads "">
 <!ENTITY nav.debs "">

 <!-- Third block: DotGNU Developers Community -->
 <!ENTITY nav.lists "">
 <!ENTITY nav.wiki "">
 <!ENTITY nav.irc "">
 <!ENTITY nav.join "">

<!-- Fourth block: Advocacy -->
 <!ENTITY nav.advocacy "">
 <!ENTITY nav.posters "">

<!-- Fifth block: Misc Information -->
 <!ENTITY nav.arch "">
 <!ENTITY nav.projects "">
 <!ENTITY nav.pnet.lib.status "">
 <!ENTITY nav.pnet.lib.docs "">
 <!ENTITY nav.patent "">

 <!ENTITY misc.gnu "">
 <!ENTITY misc.dotgnu "">
 <!ENTITY _lt_ "">
 <!ENTITY _gt_ "">
 <!ENTITY _quot_ "">
 <!ENTITY _apos_ "">
 <!ENTITY _amp_ "">
 <!ENTITY nbsp "">
 <!ENTITY copy "">
 <!ENTITY root "">
<!--======================================== declared here, defined elsewhere ========================================-->

<!--======================================== don't touch this stuff ========================================-->
 <!ELEMENT ul (li)+>
 <!ELEMENT ol (li)+>
 <!ELEMENT dl (dt|dd)+>
 <!ELEMENT dt (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT li (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT dd (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT blockquote (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*><!--no nesting blockquotes-->
 <!ELEMENT pre (#PCDATA | include | br | em | strong | code | a)*><!--no images in pre-->
 <!ELEMENT a (#PCDATA | include | br | em | strong | code | img)*><!--no nesting anchors-->
 <!ELEMENT content (#PCDATA | include | p | h1 | h2 | h3 | h4 | pre | blockquote)*><!--block elements only in top level-->
 <!ELEMENT p (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT em (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT strong (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT code (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h1 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h2 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h3 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h4 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT br EMPTY>
 <!ELEMENT img EMPTY>
 <!ELEMENT include EMPTY>
 <!ATTLIST a title CDATA #IMPLIED name NMTOKEN #IMPLIED href CDATA #IMPLIED>
 <!ATTLIST img src CDATA #REQUIRED alt CDATA #REQUIRED align (top|middle|bottom|left|right) #IMPLIED>
 <!ATTLIST include file CDATA #REQUIRED entry NMTOKEN #IMPLIED overwrite (true|false) #IMPLIED>
<!--======================================== don't touch this stuff ========================================-->
]>

<content>
<h1>Acronyms Explained</h1>
<h2>Acronmyns related to Portable.NET</h2>
<p>
<dl>
<dt><a name="cscc">cscc</a></dt>
<dd>A compiler collection which can compile C and C# to IL or Java bytecode.
This is part of DotGNU Portable.NET</dd>
<dt><a name="IL">IL</a></dt>
	<dd>Intermediate Language.  This is the bytecode format that is used
		to represent compiled programs.  It has sufficient instructions
		to support many programming languages, including C#.</dd>
<dt><a name="CIL">CIL</a></dt>
	<dd>Common Intermediate Language.  This term is used in the <a href="#ecma">ECMA</a>
		standards.  Prior to ECMA standardization, it was known as IL.
		We use the two acronyms interchangeably.</dd>
<dt><a name="MSIL">MSIL</a></dt>
	<dd>Microsoft Intermediate Language.  This is exactly the same as
		CIL, but some media reports have called it "MSIL" for
		some reason.</dd>
<dt><a name="CTS">CTS</a></dt>
	<dd>Common Type System.  The standard type system that is used
		to represent programming language constructs such as objects
		and types.  A language doesn't have to use the CTS, but doing
		so improves interoperability.</dd>
<dt><a name="CLS">CLS</a></dt>
	<dd>Common Language Specification.  A set of conventions for types
		and libraries that promote interoperability between programming
		languages.</dd>
<dt><a name="CLR">CLR</a></dt>
	<dd>Common Language Runtime.  The engine that executes CIL programs.
		In DotGNU Portable.NET's case, this is the "<code>ilrun</code>"
		program.</dd>
<dt><a name="CLI">CLI</a></dt>
	<dd>Common Language Infrastructure.  The complete system, comprising
		CIL, CTS, CLS, and CLR.</dd>
<dt><a name="CLI">JVM</a></dt>
	<dd>Java Virtual Machine.
	The bytecode system of the Java language.</dd>
<dt><a name="C#">C#</a></dt>
	<dd>Pronounced "C-Sharp".  The primary programming language that is
		used with the CLI, but by no means the only such language.</dd>
<dt><a name="PE">PE/COFF</a></dt>
	<dd>Portable Executable / Common Object File Format.  This is the
		binary format used by the 32-bit Microsoft Windows system
		to represent compiled applications.  The CLI extends PE/COFF
		with new sections containing CIL definitions.</dd>
<dt><a name="ECMA">ECMA</a></dt>
	<dd>European Computer Manufacturer's Association.  The standards
		body that Microsoft has chosen to standardize CLI.  The
		standards are here:
<blockquote>
 <a href="http://www.ecma-international.org/publications/standards/ECMA-334.HTM"><code>http://www.ecma-international.org/publications/standards/ECMA-334.HTM</code></a> (C#)<br/>
<a href="http://www.ecma-international.org/publications/standards/ECMA-335.HTM"><code>http://www.ecma-international.org/publications/standards/ECMA-335.HTM</code></a> (CLI).
</blockquote>
If you wish to contribute to the C# library, you will also need the
following file: <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-335-xml.zip"><code>ftp://ftp.ecma.ch/ecma-st/Ecma-335-xml.zip</code></a>.
Unpack this zip file and then use the "<code>csdoc2html</code>" program (which
	you can find in the <code>csdoc</code> directory of the pnet package
	of <a href="&nav.pnet;">DotGNU Portable.NET</a>)
	DotGNU to convert the XML file into HTML, so that you can view its
	contents more easily.
ECMA specifies the bare minimum necessary to get a Common Language
Runtime (CLR) to work.  However, this bare minimum is not very useful
for realistic C# applications.
Microsoft's .NET Framework SDK contains a lot more classes in its
base class libraries.  Because we wish to be (more or less) compatible
with Microsoft's .NET offerings, we have to provide more than what ECMA
specifies.</dd>
<dt><a name="gcc">gcc</a></dt>
<dd>The GNU Compiler Collection, which currently contains front ends for C,
	C++, Objective-C, Fortran, Java, and Ada, as well as libraries for
	these languages.  GCC is good for creating native code
	for register-based CPU's,  but adapting it to generate IL bytecode
	would not be an easy task.  (The right way to do it would be
	to add, besides the "Register Transfer language" which is used
	internally in <code>gcc</code>, in addition a "Stack Transfer
	Language" (STL), that passes all languages through a separate code
	generator that knows about stack machines.  Then we can write STL
	back-ends for <a href="#IL">IL</a> and <a href="#JVM">JVM</a>
	bytecode.  Both gcj (the GNU compiler for Java) and DotGNU would
	benefit	from this.)</dd>
</dl>
</p>
<h2>Acronmyns related to DotGNU webservices</h2>
<p>
<dl>
<dt><a name="RDF">RDF</a></dt>
<dd>The <a href="http://www.w3.org/RDF/">Resource Description Framework</a>,
a <a href="http://w3.org">W3C</a> recommendation.</dd>
<dt><a name="FOAF">FOAF</a></dt>
<dd>The <a href="http://xmlns.com/foaf/0.1/">Friend of a Friend (FOAF)</a> RDF
	vocabulary is described using <a href="http://w3.org">W3C</a>
	<a href="http://www.w3.org/RDF/">RDF</a> Schema and the
	Web Ontology Language.</dd>
<dt><a name="DGEE">DGEE</a></dt>
<dd>The <a href="&nav.dgee;">DotGNU Execution Environment</a>.</dd>
</dl>
</p>
<p class="maincontent">
You are invited to add your comments concerning this
at <a href="http://wiki.dotgnu.org/WebsiteComments/acronyms">the appropriate
page of the DotGNU Wiki</a>
</p>
</content>