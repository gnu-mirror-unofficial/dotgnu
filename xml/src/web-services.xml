<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE content
[
<!--======================================== modify but don't delete ========================================-->
 <!ENTITY base "./">
 <!ENTITY title	"DotGNU Project - What about &_quot_;Web Services&_quot_;?">
 <!ENTITY this "web-services.html">
 <!ENTITY maintainer "&lt;a href=&quot;http://norbert.ch/&quot;&gt;Norbert Bollow&lt;/a&gt; &lt;a href=&quot;mailto:nb@cisto.com&quot;&gt;&_lt_;nb@cisto.com&_gt_;&lt;/a&gt;">
 <!ENTITY modtime "Sun Oct 20 02:03:09 UTC 2002">
<!--======================================== modify but don't delete ========================================-->

<!--======================================== add custom entities here ========================================-->
<!--======================================== add custom entities here ========================================-->

<!--======================================== declared here, defined elsewhere ========================================-->
 <!ENTITY nav.snapshots "">
 <!ENTITY nav.rationale "">
 <!ENTITY nav.info "">
 <!ENTITY nav.debs "">
 <!ENTITY nav.faq "">
 <!ENTITY nav.essays "">
 <!ENTITY nav.proposals "">
 <!ENTITY nav.patent "">
 <!ENTITY nav.projects "">
 <!ENTITY nav.proposals.active "">
 <!ENTITY nav.arch "">
 <!ENTITY nav.see "">
 <!ENTITY nav.phpgw "">
 <!ENTITY nav.pnet "">
 <!ENTITY nav.pnet.lib.status "">
 <!ENTITY nav.pnet.lib.docs "">
 <!ENTITY nav.web_services "">
 <!ENTITY nav.auth "">
 <!ENTITY nav.mail.lists "">
 <!ENTITY nav.mail.pipermail "">
 <!ENTITY nav.mail.announce "">
 <!ENTITY nav.mail.developers "">
 <!ENTITY nav.mail.auth "">
 <!ENTITY nav.mail.arch "">
 <!ENTITY nav.mail.biz "">
 <!ENTITY nav.mail.website "">
 <!ENTITY misc.freedev "">
 <!ENTITY misc.gnu "">
 <!ENTITY misc.dotgnu "">
 <!ENTITY mail.gnu "">
 <!ENTITY mail.dotgnu "">
v <!ENTITY mail.rhysw "">
 <!ENTITY mail.gopal "">
 <!ENTITY mail.minten "">
 <!ENTITY mail.dnicol "">
 <!ENTITY _lt_ "">
 <!ENTITY _gt_ "">
 <!ENTITY _quot_ "">
 <!ENTITY _apos_ "">
 <!ENTITY _amp_ "">
 <!ENTITY nbsp "">
 <!ENTITY copy "">
 <!ENTITY root "">
<!--======================================== declared here, defined elsewhere ========================================-->

<!--======================================== don't touch this stuff ========================================-->
 <!ELEMENT ul (li)+>
 <!ELEMENT ol (li)+>
 <!ELEMENT dl (dt|dd)+>
 <!ELEMENT dt (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT li (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT dd (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT blockquote (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*><!--no nesting blockquotes-->
 <!ELEMENT pre (#PCDATA | include | br | em | strong | code | a)*><!--no images in pre-->
 <!ELEMENT a (#PCDATA | include | br | em | strong | code | img)*><!--no nesting anchors-->
 <!ELEMENT content (#PCDATA | include | p | h1 | h2 | h3 | h4 | pre | blockquote)*><!--block elements only in top level-->
 <!ELEMENT p (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT em (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT strong (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT code (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h1 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h2 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h3 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h4 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT br EMPTY>
 <!ELEMENT img EMPTY>
 <!ELEMENT include EMPTY>
 <!ATTLIST a title CDATA #IMPLIED name NMTOKEN #IMPLIED href CDATA #IMPLIED>
 <!ATTLIST img src CDATA #REQUIRED alt CDATA #REQUIRED align (top|middle|bottom|left|right) #IMPLIED>
 <!ATTLIST include file CDATA #REQUIRED entry NMTOKEN #IMPLIED overwrite (true|false) #IMPLIED>
<!--======================================== don't touch this stuff ========================================-->
]>

<content>
<h1>
 What about "Web Services"?
</h1>
<p>
 Microsoft's concept of "Web Services" is fundamentally flawed because
 it requires end-users to transfer their data to the computer systems
 of Application Service Providers (ASPs).
</p>
<p>
 There is nothing wrong with using an Application Service Provider if
 you want to, but it is ethically wrong to force computer users to use
 ASPs by not giving them the option of running the applications they
 want on their own PCs.
</p>
<p>
 The DotGNU platform solves this problem by allowing the same program
 to be run as an application on the end-user's PC or as a "web service"
 on computer systems that are provided and maintained by an Application
 Service Provider.
</p>
<h2>
 Why DotGNU is better
</h2>
<p>
 There are both ethical and practical reasons why web-based
 applications should be implemented on the
 <a href="&nav.arch;">DotGNU platform</a> and not as
 pure "web services" like Microsoft wants.
</p>
<h3>
 Ethical Reasons
</h3>
<ul>
 <li>
  End-users must be given the freedom to keep their data
  on their own PCs unless they really want to trust an ASP with
  their data.
 </li>
 <li>
  End-users must be given the freedom to choose any software they
  want for processing their data.  With the .NET initiative,
  Microsoft tries to gain monopoly power that would allow them to
  effectively prevent ASPs from making software available that is
  "not compatible" with Microsoft's licensing terms.  Microsoft's
  efforts in this area seem to be directed in particular against
  Free Software that is licensed under the GNU General Public
  License.
 </li>
</ul>
<h3>
 Practical Reasons
</h3>
<ul>
 <li>
  In many situations it is only necessary to access some data from
  a single PC.  In these situations it is obviously better when
  the data and the software which processes it are also located on
  this PC.
 </li>
 <li>
  The DotGNU platform makes it easy for ASPs to set up their
  services in such a way that there is no single point of
  failure.  This is in sharp contrast to Microsoft's concept of
  "web services" where all "web services" rely on Microsoft's
  passport system.  If Microsoft's passport system is temporarily
  not available, then all "web services" which rely on it are also
  not available.
 </li>
</ul>
<h2>
 Examples of Application Programs
</h2>
<h3>
Test Webservices
</h3>
<p>
You can try two C# based webservices by making XML-RPC calls to
http://minddog.shacknet.nu:8080/wstest.dgmx
(<a href="http://minddog.shacknet.nu:8080/wstest.dgmx">webservice test</a>)
and
http://minddog.shacknet.nu:8080/hexpuzzle.dgmx
(<a href="http://minddog.shacknet.nu:8080hexpuzzle.dgmx/">simple
puzzle program</a>). Yes, it's the same URL both for the webservice
interface and the documentation, as this webservice server called
DGEE ("DotGNU Execution Environment") outputs documentation when the file
is accessed by a browser.  This way, webservices are automatically
self-documenting.
</p>
<h3>
Business Processes
</h3>
<p>
The main application of webservices will perhaps be that various
business processes can be implemented as webservices.  The goal
of the DotGNU project is to provide the tools for creating such
webservices plus some examples.
</p>
<h3>
Groupware Webservices
</h3>
<p>
<a href="http://phpgroupware.org/">phpGroupWare</a> is a full-featured
groupware system where each component can also be accessed as a webservice
component via the xml-rpc protocol.
</p>
<h3>
A Dungeon Exploration Game
</h3>
<p>
Here is an idea for a fun webservice application which could be called
Hack#.  I'm thinking of a dungeon exploration game in the tradition of
Rogue, Hack, <a href="http://nethack.org">Nethack</a> ..., implemented
in C# as a webservice.  Dungeon levels are created on the webservice
server opon request (e.g. via XML-RPC or SOAP) from the client.
Interaction between different players (i.e. chatting, trading items,
etc) is possible in combat-free zones which can be implemented as
special levels.
</p>
<h3>Asynchronous Webservices</h3
<p>
Probably in the near future we'll use SOAP over Jabber for
Asynchronous webservices ... That'll be a conversational and stateful 
communication which will be slightly revolutionary (which is why we're
first going in for backward compatibility).
</p>
 </li>
 <li>
 </li>
</ul>
</content>