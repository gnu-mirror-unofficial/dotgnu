<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE content
[
<!--======================================== modify but don't delete ========================================-->
 <!ENTITY base "./">
 <!ENTITY title	"DotGNU Portable.NET">
 <!ENTITY this "pnet.html">
 <!ENTITY maintainer "&lt;a href=&quot;http://norbert.ch/&quot;&gt;Norbert Bollow&lt;/a&gt; &lt;a href=&quot;mailto:nb@SoftwareEconomics.biz&quot;&gt;&_lt_;nb@SoftwareEconomics.biz&_gt_;&lt;/a&gt;">
 <!ENTITY modtime "Sat August 23, 2003">
<!--======================================== modify but don't delete ========================================-->

<!--======================================== add custom entities here ========================================-->
<!--======================================== add custom entities here ========================================-->

<!--======================================== declared here, defined elsewhere ========================================-->
 <!ENTITY nav.ecma.334 "">
 <!ENTITY nav.ecma.335 "">
 <!ENTITY nav.pnet.changes "">
 <!ENTITY nav.pnet.packages "">
 <!ENTITY nav.pnet.install "">
 <!ENTITY nav.samples "">
 <!ENTITY nav.dgee "">
 <!ENTITY nav.snapshots "">
 <!ENTITY nav.debs "">
 <!ENTITY nav.faq "">
 <!ENTITY nav.essays "">
 <!ENTITY nav.proposals "">
 <!ENTITY nav.patent "">
 <!ENTITY nav.projects "">
 <!ENTITY nav.proposals.active "">
 <!ENTITY nav.arch "">
 <!ENTITY nav.phpgw "">
 <!ENTITY nav.pnet "">
 <!ENTITY nav.pnet.lib.status "">
 <!ENTITY nav.pnet.lib.docs "">
 <!ENTITY nav.web_services "">
 <!ENTITY nav.auth "">
 <!ENTITY nav.mail.lists "">
 <!ENTITY nav.mail.pipermail "">
 <!ENTITY nav.mail.announce "">
 <!ENTITY nav.mail.developers "">
 <!ENTITY nav.mail.auth "">
 <!ENTITY nav.mail.arch "">
 <!ENTITY nav.mail.biz "">
 <!ENTITY nav.mail.website "">
 <!ENTITY misc.freedev "">
 <!ENTITY misc.gnu "">
 <!ENTITY misc.dotgnu "">
 <!ENTITY mail.gnu "">
 <!ENTITY mail.dotgnu "">
 <!ENTITY mail.rhysw "">
 <!ENTITY mail.gopal "">
 <!ENTITY mail.minten "">
 <!ENTITY mail.dnicol "">
 <!ENTITY _lt_ "">
 <!ENTITY _gt_ "">
 <!ENTITY _quot_ "">
 <!ENTITY _apos_ "">
 <!ENTITY _amp_ "">
 <!ENTITY nbsp "">
 <!ENTITY copy "">
 <!ENTITY root "">
<!--======================================== declared here, defined elsewhere ========================================-->

<!--======================================== don't touch this stuff ========================================-->
 <!ELEMENT ul (li)+>
 <!ELEMENT ol (li)+>
 <!ELEMENT dl (dt|dd)+>
 <!ELEMENT dt (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT li (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT dd (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT blockquote (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*><!--no nesting blockquotes-->
 <!ELEMENT pre (#PCDATA | include | br | em | strong | code | a)*><!--no images in pre-->
 <!ELEMENT a (#PCDATA | include | br | em | strong | code | img)*><!--no nesting anchors-->
 <!ELEMENT content (#PCDATA | include | p | h1 | h2 | h3 | h4 | pre | blockquote)*><!--block elements only in top level-->
 <!ELEMENT p (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT em (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT strong (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT code (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h1 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h2 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h3 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h4 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT br EMPTY>
 <!ELEMENT img EMPTY>
 <!ELEMENT include EMPTY>
 <!ATTLIST a title CDATA #IMPLIED name NMTOKEN #IMPLIED href CDATA #IMPLIED>
 <!ATTLIST img src CDATA #REQUIRED alt CDATA #REQUIRED align (top|middle|bottom|left|right) #IMPLIED>
 <!ATTLIST include file CDATA #REQUIRED entry NMTOKEN #IMPLIED overwrite (true|false) #IMPLIED>
<!--======================================== don't touch this stuff ========================================-->
]>

<content>

<h1>DotGNU Portable.NET</h1>
<p>
The goal of DotGNU Portable.NET is to build a suite of Free Software tools
to compile and execute applications for the Common Language Infrastructure
(CLI), which is often referred to as ".NET".</p>
<p>
The initial target platform was GNU/Linux, but DotGNU Portable.NET has
been known to work under Windows, NetBSD, FreeBSD, Solaris, and MacOS X,
amongst others.  It also runs on a variety of CPUs including x86,
PPC, ARM, Sparc, s390, Alpha, ia-64, and PARISC.</p>

<h2>Focus on Compatibility</h2>
<p>
DotGNU Portable.NET is focused on compatibility with the
<a href="&nav.ecma.334;">ECMA-334</a>
and
<a href="&nav.ecma.335;">ECMA-335</a>
specifications
for C# and CLI, and with Microsoft's commercial CLI implementation.  Our main
goal is to make it easy to write portable application programs which work well
both on DotGNU Portable.NET and on Microsoft's .NET platform.
</p>
<p>
In addition, we want to make sure that many application
programs which were written for Microsoft's .NET platform
(with no consideration for portability) will work well with
DotGNU on many operating systems.
</p>

<h2>Installing</h2><p>

DotGNU Portable.NET can be installed either from a
<a href="&nav.pnet.packages;">binary package</a>
or from <a href="&nav.pnet.install;">source code</a> (recommended).
</p>
<p>
Once you have installed DotGNU Portable.NET, you may want to install
<a href="&nav.dgee;">DGEE</a>.  Also,
check out the <a href="&nav.samples;">demo and sample programs</a>.</p>

<h2>Runtime engine</h2><p>

The runtime engine in DotGNU Portable.NET, called "ilrun", is used to
interpret programs in the Common Intermediate Language (CIL) bytecode
format, described in the <a href="&nav.ecma.335;">ECMA-335</a>
specifications.</p>
<p>
Because interpreting CIL bytecode directly is quite inefficient,
we take a different approach.  We first convert the CIL bytecode into
a simpler instruction set for what we call the Converted Virtual
Machine (CVM).  The simpler CVM instructions are then executed using
a high-performance interpreter.  A description of the CVM instruction
set can be found <a href="http://www.southern-storm.com.au/doc/cvm/index.html" target="_top">here</a>.
</p>
<p>
The CVM approach gives us many of the benefits of a Just-In-Time compiler
(JIT), in that the opcodes can be tailored to handle system differences
(e.g. 32-bit vs 64-bit CPU's).  At the same time, the engine's source code
is highly portable to new platforms.</p>
<p>
As another optimization on some CPU's (currently x86 and ARM), we
further translate CVM opcodes into native machine code for direct
execution.  This gives an additional performance improvement with
only a small coding effort required.</p>
<p>
We will eventually write a full JIT for DotGNU Portable.NET, but we
are currently focused on completeness and stability.</p>
<p>
See the file "<code>pnet/engine/HACKING</code>" in the source code
for further information on the structure of the runtime engine.</p>

<h2>The license</h2><p>
The 'ilrun' runtime engine is made available under the terms of the
GNU General Public License (GPL), the 'pnetlib' class library under
the terms of the GPL with a "linking exception" which allows you to
link application programs with pnetlib regardless of what license
has been chosen for your application program.  In other words, the
"linking exception" causes the GPL to only extend to the C# library's
API boundaries and then stop there.
</p>

<h2>Compiler</h2><p>

The DotGNU Portable.NET compiler, cscc, is a modular compiler system with
good support for the C# and C programming languages.  Work on support for
some other languages (Java and VB.NET) has been started.  The C# front-end
implements the <a href="&nav.ecma.334;">ECMA C# Language
Specification ECMA-334</a>.  The C language front-end implements
ANSI C.</p>
<p>
Implementing additional languages is aided significantly by the innovative
"Tree Compiler Compiler" (treecc) program, which uses aspect-oriented
programming techniques to manage the complexity of compiler construction.
See the <a href="../pnet/treecc/treecc_toc.html" target="_top">treecc
documentation</a> for more information on this tool.</p>
<p>
The compiler is designed to support bytecode generation for multiple bytecode
systems.  The current bytecode back-end supports the Common Language
Infrastructure (CLI) defined by<a href="&nav.ecma.335;">ECMA C# Language
Specification ECMA-335</a>.
Other back-ends to support the Java Virtual Machine (JVM) and the
Perl 6 Parrot engine are in progress.  (Note however that the JVM
lacks sufficient instructions to run C code, so cscc will never be 
able to compile C to the JVM.)
</p>

<h2>System.Windows.Forms</h2><p>

<a href="&root;screenshots/formshello.png" target="_top"><img src="&root;screenshots/formshello-small.png" align="right" alt="WinForms screenshot - click to enlarge"/></a>An advantage of our
implementation of System.Windows.Forms is that we don't try to wrap up
third party widget sets like Gtk, Qt, Wine, etc.  Instead, we provide a
basic drawing layer and then render the controls ourselves.  The approach
is similar to Java Swing, in that all controls are implemented in pure C#.</p>
<p>

This approach should allow us to emulate the Windows visual appearance
and behavior more closely and portably than other approaches because we
don't need to work around the quirks in foreign toolkits.  Our implementation
has been known to run on x86, PPC, and ARM based GNU/Linux systems, as well as
Mac OS X.  See the <a href="http://www.dotgnu.org/" target="_top">DotGNU
Web site</a> for current screenshots.</p>
<p>

The DotGNU Portable.NET Forms implementation is structured into three layers,
which are found in the source directories <code>System.Drawing</code>,
<code>System.Drawing/Toolkit</code>, and <code>System.Windows.Forms</code>.</p>
<p>

<code>System.Drawing</code> provides the basic drawing functionality,
emulating the Windows GDI layer as faithfully as possible.  When drawing
to a control, use the definitions in <code>System.Drawing.Graphics</code>.</p>
<p>

<code>System.Drawing/Toolkit</code> defines an interface to primitive
drawing toolkits.  Toolkits provide simple line/text/etc drawing
(<code>IToolkitGraphics</code>), plus a simple window mechanism
(<code>IToolkitWindow</code>).</p>
<p>

There may be multiple toolkits in the system, each providing
drawing functionality in a different manner.  The current
toolkits include <code>System.Drawing.Xsharp</code>, which wraps
around the DotGNU Portable.NET <code>Xsharp</code> library; and
<code>System.Drawing.Win32</code>, which wraps up the native
Win32 API under Windows.</p>
<p>

<code>System.Windows.Forms</code> builds upon the primitive drawing and
window facilities from <code>System.Drawing</code> and
<code>System.Drawing/Toolkit</code> to implement the various controls,
forms, dialogs, etc, that are defined by the Forms API.</p>
<p>

The file "<code>pnetlib/System.Windows.Forms/HACKING</code>" in the
source code contains more information on developing for our implementation
of System.Windows.Forms.</p>
<p>

We are looking for volunteers to help us finish the
<code>System.Windows.Forms</code> implementation, and are offering
cash prizes.  See the <a href="competition.html">competition</a> page
for more details.</p>

<h2>Further information</h2><p>

For further information on DotGNU Portable.NET, please refer to the
<A href="http://www.southern-storm.com.au/pnet_faq.html">FAQ of the
Portable.Net development project</A>. "Latest Changes" information
with information on source code packages released by the project is
available <a href="&nav.pnet.changes;">here</a>.
</p>

</content>
