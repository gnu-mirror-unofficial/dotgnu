<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE content
[
<!--======================================== modify but don't delete ========================================-->
 <!ENTITY base "./">
 <!ENTITY title	"DotGNU Project - Virtual Identities">
 <!ENTITY this "auth.html">
 <!ENTITY maintainer "&lt;a href=&quot;http://norbert.ch/&quot;&gt;Norbert Bollow&lt;/a&gt; &lt;a href=&quot;mailto:nb@SoftwareEconomics.biz&quot;&gt;&_lt_;nb@SoftwareEconomics.biz&_gt_;&lt;/a&gt;">
 <!ENTITY modtime "Fri March 14, 2003">
<!--======================================== modify but don't delete ========================================-->

<!--======================================== add custom entities here ========================================-->
<!--======================================== add custom entities here ========================================-->

<!--======================================== declared here, defined elsewhere ========================================-->
 <!ENTITY nav.snapshots "">
 <!ENTITY nav.rationale "">
 <!ENTITY nav.info "">
 <!ENTITY nav.debs "">
 <!ENTITY nav.faq "">
 <!ENTITY nav.essays "">
 <!ENTITY nav.proposals "">
 <!ENTITY nav.patent "">
 <!ENTITY nav.projects "">
 <!ENTITY nav.proposals.active "">
 <!ENTITY nav.arch "">
 <!ENTITY nav.see "">
 <!ENTITY nav.phpgw "">
 <!ENTITY nav.pnet "">
 <!ENTITY nav.pnet.lib.status "">
 <!ENTITY nav.pnet.lib.docs "">
 <!ENTITY nav.web_services "">
 <!ENTITY nav.auth "">
 <!ENTITY nav.mail.lists "">
 <!ENTITY nav.mail.pipermail "">
 <!ENTITY nav.mail.announce "">
 <!ENTITY nav.mail.developers "">
 <!ENTITY nav.mail.auth "">
 <!ENTITY nav.mail.arch "">
 <!ENTITY nav.mail.biz "">
 <!ENTITY nav.mail.website "">
 <!ENTITY misc.freedev "">
 <!ENTITY misc.gnu "">
 <!ENTITY misc.dotgnu "">
 <!ENTITY mail.gnu "">
 <!ENTITY mail.dotgnu "">
 <!ENTITY mail.rhysw "">
 <!ENTITY mail.gopal "">
 <!ENTITY mail.minten "">
 <!ENTITY mail.dnicol "">
 <!ENTITY _lt_ "">
 <!ENTITY _gt_ "">
 <!ENTITY _quot_ "">
 <!ENTITY _apos_ "">
 <!ENTITY _amp_ "">
 <!ENTITY nbsp "">
 <!ENTITY copy "">
 <!ENTITY root "">
<!--======================================== declared here, defined elsewhere ========================================-->

<!--======================================== don't touch this stuff ========================================-->
 <!ELEMENT ul (li)+>
 <!ELEMENT ol (li)+>
 <!ELEMENT dl (dt|dd)+>
 <!ELEMENT dt (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT li (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT dd (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*>
 <!ELEMENT blockquote (#PCDATA | include | br | em | strong | code | a | img | ul | ol | dl)*><!--no nesting blockquotes-->
 <!ELEMENT pre (#PCDATA | include | br | em | strong | code | a)*><!--no images in pre-->
 <!ELEMENT a (#PCDATA | include | br | em | strong | code | img)*><!--no nesting anchors-->
 <!ELEMENT content (#PCDATA | include | p | h1 | h2 | h3 | h4 | pre | blockquote)*><!--block elements only in top level-->
 <!ELEMENT p (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT em (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT strong (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT code (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h1 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h2 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h3 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT h4 (#PCDATA | include | br | em | strong | code | a | img)*>
 <!ELEMENT br EMPTY>
 <!ELEMENT img EMPTY>
 <!ELEMENT include EMPTY>
 <!ATTLIST a title CDATA #IMPLIED name NMTOKEN #IMPLIED href CDATA #IMPLIED>
 <!ATTLIST img src CDATA #REQUIRED alt CDATA #REQUIRED align (top|middle|bottom|left|right) #IMPLIED>
 <!ATTLIST include file CDATA #REQUIRED entry NMTOKEN #IMPLIED overwrite (true|false) #IMPLIED>
<!--======================================== don't touch this stuff ========================================-->
]>

<content>
<h1>
 DotGNU Virtual Identities
</h1>
<p>
 With a "Virtual ID" system we mean an integrated solution to the
 following problems:
</p>
<ul>
 <li>
  <strong>
   Authentication
  </strong>
  <p>
   Basically, a <em>Virtual ID</em> consists in some digital information,
   and the user must be able to prove ownership of this Virtual ID.
  </p>
 </li>
 <li>
  <strong>
   Authorization
  </strong>
  <p>
   A user who has proved ownership of a Virtual ID may be authorized to
   access certain information, or perform certain actions.  Webservice
   servers must be able to verify this.
  </p>
 </li>
 <li>
  <strong>
   Customization
  </strong>
  <p>
   Users should be able to customize their internet experience:  There
   should be a way in which users can communicate their preferences to
   all webservice servers that want to take user preferences into
   consideration.  This must be set up in a way that avoids violating the
   user's privacy.
  </p>
 </li>
 <li>
  <strong>
   Selected Sharing of Private Data
  </strong>
  <p>
   There should be a simple way in which a website can request private
   information such as email address, postal address, telephone number,
   fax number, or credit card number from the user.  Such private
   information must never be given to the website without explicit
   approval from the user, but the user should not be required to enter
   the information every time.
  </p>
 </li>
</ul>
<p>
 We must NOT create a passport "portal".  That is technically and
 morally wrong.  We must create a framework that can be scaled and
 deployed at any level desired, whether locally, at an enterprise,
 or at a portal.  Authentication and access to private information
 should be peer to peer to preserve local storage of those things
 which should remain in private users hands.  The ability to migrate
 data upward can be provided for, on a selective basis, and controls
 must be provided as to who may or may not access specific user
 information.
</p>
<p>
 For extremely high reliability (avoiding any single point of
 failure) this framework can be run on top of the DotGNU
 Distributed Execution Environment.  (For more information about this
 please refer to the <a href="&nav.arch;">DotGNU Platform</a> page.)
</p>
<h2>
 How DotGNU will address these problems
</h2>
<p>
DotGNU's native authentication and authorization subsystem will probably
be founded on a FOAF-based virtual identities system.  In addition,
<A href="http://sourceforge.net/projects/macs">MACS, the Modular Access Control
System</A> will be available for integrating DotGNU with other auth systems, as
well as making DotGNU's authentication and authorization subsystem available
to non-DotGNU-based applications.
</p>
<h2>
 Suggested terminology
</h2>
<ul>
 <li>
  <em>Profile Host</em>: Hosts profiles ("virtual identities")
  to facilitate remote access.
 </li>
 <li>
  <em>Profile Owner</em>: Owns profile data and controls access to
  it.
 </li>
 <li>
  <em>Service Provider</em>: Creates and delivers Web Services that
  request profile data.
 </li>
</ul>
<h2>
 Your comments please...
</h2>
<p class="maincontent">
You are invited to add your comments concerning this
at <a href="http://wiki.dotgnu.org/WebsiteComments/auth">the appropriate
page of the DotGNU Wiki</a>
</p>
<h4>
 Acknowledgment:
</h4>
<p>
 The "Profile Host" / "Profile Owner" / "Service
 Provider" terminology has been proposed by
 <include file="navlinks.xml" entry="albert.scherbinsky" />
 in a <a href="&nav.mail.pipermail;auth/2002-January/000432.html">post
 on the DotGNU Auth mailing list</a>.
</p>
</content>