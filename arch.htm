<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<TITLE>The DotGNU Platform</TITLE>
<LINK REV="made" HREF="mailto:nb@freedevelopers.net">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#1F00FF" ALINK="#FF0000" VLINK="#9900DD">
<A HREF="/graphics/agnuhead.html"><IMG SRC="/graphics/gnu-head-sm.jpg"
   ALT=" [image of the Head of a GNU] "
   WIDTH="129" HEIGHT="122"></A>

<H1>The DotGNU Platform</H1>
The DotGNU Platform will consist of two major components:
<UL>
  <LI><STRONG>DotGNU Secure Execution Environment</STRONG>
    <P>
    The Secure Execution Environment is a component which can download
    bytecode (see below for a discussion of what kinds of bytecode
    will be supported) from the network and execute it in a secure manner.
  <LI><STRONG>DotGNU Distributed Execution Environment</STRONG>
    <P>
    DotGNU's Distributed Execution Environment will be like an
    operating system for a "distributed computer" consisting of
    several instances of the "DotGNU Secure Execution Environment"
    that are running on several computers.  This system must be able
    to take care of replicating databases across all the parts of this
    "distributed computer" and propagating updates.
</UL>
In addition to the DotGNU Platform, we are also working on a
<A href="auth.htm">DotGNU Virtual Identities</A> system.  This system
will eventually run as an application on the DotGNU Platform, but we
are also working on a quick-and-dirty proof-of-concept implementation
that can already be made available before the DotGNU Platform if
available.
<H2>What kinds of bytecode will the DotGNU Platform support?</H2>
It is important that a fully IL-compatible bytecode system is supported as per 
the ECMA specs in DotGNU.  It is also important to have alternatives and 
options possible should this not prove legally possible or require some other 
ethical compromises with freedom that we should not make.
<P>
For this reason DotGNU is taking this "two track approach":
<UL>
  <LI>One track is to support a fully IL-compatible bytecode system,
    the C# language spec, and class libs that fully comply with the ECMA
    specs.
  <LI>The other track is based on Java work with supporting class libs.
    This will immediately make it possible to create applications for
    the DotGNU platform in a lot of programming languages.  See
    <A href="http://grunge.cs.tu-berlin.de/~tolk/vmlanguages.html">http://grunge.cs.tu-berlin.de/~tolk/vmlanguages.html</A> for details.
</UL>
This "two track approach" offers both freedom of choice 
and leverages another, very mature bytecode system, as well as providing 
options in case of legal dirty tricks.
<P>
This approach naturally leads to an architecture of the DotGNU
platform that will support multiple bytecode formats, so that
it will be possible for other virtual machines to be added at a
later stage.
<H2>How you can contribute</H2>
If you would like to contribute to the development of the DotGNU
Platform, please subscribe to
<A href="http://dotgnu.org/mailman/listinfo/arch">DotGNU arch</A>
mailing list, join the discussions, and find a way in which you can
help move the project forward.
<HR>
This page was last updated on July 26, 2001. It is maintained by
Norbert Bollow &lt;nb@freedevelopers.net&gt; with support from the
<A href="http://dotgnu.org/mailman/listinfo/website">DotGNU Website
   mailing list</A>.
</BODY>
